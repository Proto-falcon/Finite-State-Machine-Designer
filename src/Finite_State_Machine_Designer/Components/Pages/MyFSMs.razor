@page "/MyFSMs"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Options
@using Configuration
@using Services
@using Enums
@inherits ModuleCheckBaseComponent
@rendermode InteractiveServer
@implements IDisposable
@inject UserService userService
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Navigation
@inject IOptions<UsersConfig> _userConfig
@inject ILogger<MyFSMs> _logger
@attribute [Authorize]

<PageTitle>My State Machines</PageTitle>
<SectionContent SectionId="RCL.Layout.MainLayout.TopBarSection">
    <h1>Finite State Machines</h1>
</SectionContent>
@if (_displayCurrentFsm)
{
    if (_loadingFsmView)
    {
        <div class="current-fsm-section" style="grid-template-columns: 1fr;">
            <Loading Height="10em" Width="10em"
            Style="border-width: 1em; justify-self: center;" />
        </div>
    }
    else
    {
        <FsmPreview 
        Fsm="_currentFsm"
        FsmState="_currentFsmResult"
        CloseDisplayFsmHandler="CloseDisplayFsmHandler"
        FsmSvgUrl="@_fsmSvgUrl"
        OnLoadFsmSvgHandler="e => RevokeUrlAsync(_fsmSvgUrl)"
        CanSave="_currentDrawnFsm is not null && _currentDrawnFsm.Name == _currentFsm?.Name"
        ReadonlyDescription="_currentDrawnFsm is null || _currentDrawnFsm.Name != _currentFsm?.Name"
        SetSaveHandler="SetSaveCurrent"
        SetDrawHandler="async (e) => await SetDrawingFsmAsync(_currentFsm)"
        ErrorMsg="@_errorMsg"
        FsmSaveState="_fsmSaveState"/>
    }
}
@if (_finishLoading && _user is not null)
{
    <FsmTable
    ClickRowHandler="DisplayFsmAsync"
    CurrentDrawnFsm="_currentDrawnFsm"
    DisplayCurrentDrawnFsmHandler="async e => await DisplayFsmAsync(_currentDrawnFsm)"
    User="_user"
    SetErrorMsg="text => _errorMsg = text"/>
    <div class="page-buttons-container">
        @if (_loadPrevFsms)
        {
            <button class="page-btn" @onclick="GetPrevFsmsHandler">
                Previous
            </button>
        }
        else
        {
            <button class="hidden-btn" />
        }
        @if (_loadMoreFsms)
        {
            <button class="page-btn" @onclick="GetMoreFsmsHandler">
                Next
            </button>
        }
        else
        {
            <button class="hidden-btn" />
        }
    </div>
}
else
{
    <div style="display:grid;">
        <Loading Height="10em" Width="10em"
        Style="border-width: 1em; justify-self: center;" />
    </div>
}

<canvas id="hiddenCanvas" style="display:none;"/>
@code
{
    [SupplyParameterFromQuery]
    [Parameter]
    public bool SaveCurrent { get; set; }
    private bool _saveFsm = false;

    private ApplicationUser? _user = null;
    /// <summary>
    /// Current FSM to be viewed.
    /// </summary>
    private FiniteStateMachine? _currentFsm = null;
    private FsmResultState _currentFsmResult = FsmResultState.Fail;
    /// <summary>
    /// Current FSM that can be drawn.
    /// </summary>
    private FiniteStateMachine? _currentDrawnFsm = null;
    private DateTime _leastRecentModifiedTime = DateTime.MaxValue;
    /// <summary>
    /// Recent updated times of first FSM in a page from most at top to least recent at bottom
    /// </summary>
    private Stack<DateTime> _recentModifiedTimes = new Stack<DateTime>();
    private double _mainFsmSvgScale = 0.5;
    private bool _displayCurrentFsm = false;
    private SaveState _fsmSaveState = SaveState.NotSaved;
    private bool _finishLoading = false;
    private bool _loadingFsmView = false;
    private bool _loadMoreFsms = false;
    private bool _loadPrevFsms = false;
    private bool _JsModuleDisposed = false;
    private const string _canvasBackgroundColour = "#313338";
    private const string _colour = "#ffffff";
    private string _fsmSvgUrl = string.Empty;
    private string _errorMsg = "";

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += HandleLocationChangedAsync;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await SetJsModule("./Components/Pages/MyFSMs.razor.js");

        if (!_JsModuleDisposed && CheckJsModule(JsModule) && _currentDrawnFsm is null)
        {
            await JsModule.InvokeAsync<bool>("fSMCanvasUtils.getCanvasContext",
                "hiddenCanvas");
            FiniteStateMachine? fsm =
            await JsModule.InvokeAsync<FiniteStateMachine>("fSMCanvasUtils.loadFSM");
            if (fsm is not null
                && fsm.States is not null && fsm.States.Count > 0)
            {
                fsm.SanitiseFsm();
                _currentDrawnFsm = fsm;
                await GenerateFsmSvgAsync(_currentDrawnFsm, _mainFsmSvgScale);
            }
            StateHasChanged();
        }

        if (_user is null)
        {
            await InitialiseUserAsync();
            StateHasChanged();
        }
        if (SaveCurrent && _user is not null && _currentDrawnFsm is not null)
            await DisplayFsmAsync(_currentDrawnFsm);
        if (_saveFsm | SaveCurrent)
        {
            SaveCurrent = false;
            await SaveCurrentFSMAsync();
            _recentModifiedTimes.Clear();
            _loadPrevFsms = false;
            await GetUserFsmsPage(DateTime.MaxValue);
            if (_user?.StateMachines.LastOrDefault() is FiniteStateMachine fsm)
                _leastRecentModifiedTime = fsm.TimeUpdated;
        }
    }

    /// <summary>
    /// Loads all the information needed to view the FSM
    /// </summary>
    /// <param name="fsm">Finite State Machine</param>
    /// <param name="reload">Reloads all of the states and transitions</param>
    private async Task DisplayFsmAsync(FiniteStateMachine fsm, bool reload = false)
    {
        _currentFsm = fsm;
        _loadingFsmView = true;
        _displayCurrentFsm = true;
        StateHasChanged();
        if (reload)
        {
            await using ApplicationDbContext dbContext =
                await DbFactory.CreateDbContextAsync();
            try
            {
                _currentFsmResult = await DBCommands.GetFullFsmAsync(dbContext, fsm, CancellationToken.None);
            }
            catch (Exception ex)
            {
                _currentFsmResult = FsmResultState.MetaDataOnly;
                _logger.LogError(ex, "Couldn't fully load Finite State Machine - ({Id}),  '{Name}'",
                fsm.Id, fsm.Name);
            }
        }
        else
            _currentFsmResult = FsmResultState.Success;

        try
        {
            await GenerateFsmSvgAsync(fsm, _mainFsmSvgScale);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Couldn't generate SVG of Finite State Machine - ({Id}),  '{Name}'",
            fsm.Id, fsm.Name);
        }
        _loadingFsmView = false;
        StateHasChanged();
    }

    /// <summary>
    /// Sets the specified FSM to be the one to be currently drawn.
    /// </summary>
    /// <param name="fsm">Finite State Machine</param>
    private async Task SetDrawingFsmAsync(FiniteStateMachine fsm)
    {
        if (_user is not null && CheckJsModule(JsModule))
        {
            _errorMsg = "";
            await JsModule.InvokeVoidAsync("fSMCanvasUtils.saveFSM", fsm);

            _currentDrawnFsm = await JsModule.InvokeAsync<FiniteStateMachine>(
                "fSMCanvasUtils.loadFSM",
                fsm);

            if (_currentDrawnFsm is null)
            {
                _errorMsg = $"Couldn't set the FSM '{fsm.Name}' to drawable";
                _logger.LogError("Couldn't set the FSM {Name} to drawable", fsm.Name);
            }
            StateHasChanged();
        }
    }

    private void CloseDisplayFsmHandler(MouseEventArgs mouseEventArgs)
    {
        _displayCurrentFsm = false;
        _fsmSaveState = SaveState.NotSaved;
        Navigation.NavigateTo("MyFSMs");
    }

    private async void GetMoreFsmsHandler(MouseEventArgs mouseEventArgs)
    {
        if (_user is not null)
        {
            DateTime mostRecentTime = DateTime.MaxValue;
            if (_user.StateMachines.FirstOrDefault() is FiniteStateMachine recentFsm)
                mostRecentTime = recentFsm.TimeUpdated;
            _recentModifiedTimes.Push(mostRecentTime);
            await GetUserFsmsPage(_leastRecentModifiedTime);
            if (_user.StateMachines.LastOrDefault() is FiniteStateMachine fsm)
                _leastRecentModifiedTime = fsm.TimeUpdated;
            else
                _leastRecentModifiedTime = DateTime.MaxValue;
            _loadPrevFsms = true;
            StateHasChanged();
        }
    }

    private async void GetPrevFsmsHandler(MouseEventArgs mouseEventArgs)
    {
        if (_user is not null)
        {
            if (!_recentModifiedTimes.TryPop(out DateTime prevRecentTime))
                prevRecentTime = DateTime.MaxValue;
            await GetUserFsmsPage(prevRecentTime, true);
            if (_user.StateMachines.LastOrDefault() is FiniteStateMachine fsm)
                _leastRecentModifiedTime = fsm.TimeUpdated;
            else
                _leastRecentModifiedTime = DateTime.MaxValue;
            // _recentModifiedTimes.RemoveAt(_recentModifiedTimes.Count-1);
            _loadPrevFsms = _recentModifiedTimes.Count > 0;
            StateHasChanged();
        }
    }

    private async void RevokeUrlAsync(string url)
        => await JS.InvokeVoidAsync("URL.revokeObjectURL", url);

    private void SetSaveCurrent(MouseEventArgs mouseEventArgs)
    {
        _saveFsm = true;
        StateHasChanged();
    }

    private async void HandleLocationChangedAsync(object? sender,
        LocationChangedEventArgs e)
    {
        await SetJsModule("./Components/Pages/MyFSMs.razor.js");
        if (CheckJsModule(JsModule) && _currentDrawnFsm is not null)
            await JsModule.InvokeVoidAsync("fSMCanvasUtils.saveFSM", _currentDrawnFsm);
        _JsModuleDisposed = true;
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= HandleLocationChangedAsync;
    }
}