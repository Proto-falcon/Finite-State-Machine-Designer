@page "/MyFSMs"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Options
@using Configuration
@using Services
@inherits ModuleCheckBaseComponent
@rendermode InteractiveServer
@implements IDisposable
@inject UserService userService
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Navigation
@inject IOptions<UsersConfig> _userConfig
@inject ILogger<MyFSMs> _logger
@attribute [Authorize]

<PageTitle>My State Machines</PageTitle>
<SectionContent SectionId="RCL.Layout.MainLayout.TopBarSection">
    <h1>Finite State Machines</h1>
</SectionContent>

<div class="current-fsm-section"
    style="@(!_displayCurrentFsm ? "display:none;" : "")
    @(_loadingFsmView | _currentFsm is null ? "grid-template-columns: 1fr;" : "")">
    @if (_loadingFsmView)
    { <Loading Height="10em" Width="10em"
        Style="border-width: 1em; justify-self: center;" />
    }
    else if (_currentFsm is null)
    {
        <p>
            <h2 class="no-fsm-display">No FSM to display.</h2>
            <button @onclick="CloseDisplayFsmHandler">✖️</button>
        </p>
    }
    else
    {
        switch (_currentFsmResult)
        {
            case FsmResultState.Success:
                <div>
                    <div class="canvas-name-group canvas-info-group">
                        <h2><label for="canvasName">Name: @_currentFsm.Name</label></h2>
                        <input id="canvasName" class="canvas-name" type="text"
                        name="name" placeholder="Name"
                        @bind:event="oninput" @bind="_currentFsm.Name" />
                    </div>
                    <div class="save-section">
                        @if (_currentlySaving)
                        {
                            <Loading Height="1.5em" Width="1.5em"
                            Style="border-width: 0.2em;" />
                        }
                        else if (_currentDrawnFsm is not null
                        && _currentDrawnFsm.Name == _currentFsm.Name)
                        {
                            <button class="inline-button"
                            @onclick="SetSaveCurrent">
                                Save
                            </button>
                        }
                        else
                        {
                            <button class="inline-button"
                            @onclick="async (e) => await SetDrawingFsmAsync(_currentFsm)">
                                Draw
                            </button>
                        }
                        @if (!string.IsNullOrWhiteSpace(_errorMsg))
                        {
                            <p class="blink">@_errorMsg</p>
                        }
                        else if (_currentSaved)
                        {
                            <p class="blink">Saved!!</p>
                        }
                    </div>
                    <p class="canvas-desc-summary">Description</p>
                    <div class="canvas-desc-group canvas-info-group">
                        <label class="canvas-desc-label" for="canvasDesc">Description:</label>
                        <textarea id="canvasDesc" name="Description"
                        readonly="@(_currentDrawnFsm is null
                    || _currentDrawnFsm.Name != _currentFsm.Name)"
                        placeholder="Description" rows="10" cols="69"
                        @bind:event="oninput" @bind="_currentFsm.Description" />
                    </div>
                </div>
                <div class="fsm-svg-section">
                    <button @onclick="CloseDisplayFsmHandler">✖️</button>
                    <img class="fsm-svg" @onload="e => RevokeUrlAsync(_fsmSvgUrl)"
                    src="@_fsmSvgUrl" />
                </div>
                break;
            case FsmResultState.MetaDataOnly:
                <div>
                    <div class="canvas-name-group canvas-info-group">
                        <h2><label for="canvasName">Name: @_currentFsm.Name</label></h2>
                        <input id="canvasName" class="canvas-name" type="text"
                               name="name" placeholder="Name"
                               @bind:event="oninput" @bind="_currentFsm.Name" />
                    </div>
                    <div class="save-section">
                        @if (_currentlySaving)
                        {
                            <Loading Height="1.5em" Width="1.5em"
                                     Style="border-width: 0.2em;" />
                        }
                        else if (_currentDrawnFsm is not null
                        && _currentDrawnFsm.Name == _currentFsm.Name)
                        {
                            <button class="inline-button"
                                    @onclick="SetSaveCurrent">
                                Save
                            </button>
                        }
                        else
                        {
                            <button class="inline-button"
                                    @onclick="async (e) => await SetDrawingFsmAsync(_currentFsm)">
                                Draw
                            </button>
                        }
                        @if (!string.IsNullOrWhiteSpace(_errorMsg))
                        {
                            <p class="blink">@_errorMsg</p>
                        }
                        else if (_currentSaved)
                        {
                            <p class="blink">Saved!!</p>
                        }
                    </div>
                    <p class="canvas-desc-summary">Description</p>
                    <div class="canvas-desc-group canvas-info-group">
                        <label class="canvas-desc-label" for="canvasDesc">Description:</label>
                        <textarea id="canvasDesc" name="Description"
                                  readonly="@(_currentDrawnFsm is null
                    || _currentDrawnFsm.Name != _currentFsm.Name)"
                                  placeholder="Description" rows="10" cols="69"
                                  @bind:event="oninput" @bind="_currentFsm.Description" />
                    </div>
                </div>
                <div class="fsm-svg-section">
                    <button @onclick="CloseDisplayFsmHandler">✖️</button>
                    <h2>Couldn't preview Finite State Machine.</h2>
                </div>
                break;
            default:
                <p>
                    <h2 class="no-fsm-display">No FSM to display.</h2>
                    <button @onclick="CloseDisplayFsmHandler">✖️</button>
                </p>
                break;
        }
    }
</div>
@if (_finishLoading)
{
    <div class="button-row-grid" style="@(_currentDrawnFsm is null ? "grid-template-columns: 1fr 1fr" : null)">
        @if (_currentDrawnFsm is not null)
        {
            <div>
                <button class="display-current-drawn-fsm" @onclick="async (e) => await DisplayFsmAsync(_currentDrawnFsm)">
                    Currently drawn FSM:<br/>
                    <text>@_currentDrawnFsm.Name</text>
                </button>
            </div>
        }
        <div class="button-row-inputs">
            <input class="fsm-query-input" type="text"
            placeholder="Search for name or description"
            @bind:event="oninput" @bind="_searchFsmQuery" />
            @if (!_searching)
            { <button @onclick="QueryFsms">🔎</button> }
            else
            {
                <Loading Height="1.7em" Width="1.7em"
                Style="border-width: 0.2em; justify-self: center;" />
            }
        </div>
        <div>
            <button style="@(_bulkDelete ? "background-color:#a45cbd": null)"
            @onclick="e => _bulkDelete = !_bulkDelete">
                Multi-Delete FSMs
            </button>
            @if (_bulkDelete)
            {
                <button @onclick="async e => await DeleteFsms(_markDeleteFsms.ToArray())">
                    Delete Fsms
                </button>
            }
        </div>
    </div>
}
@if (_finishLoading && _user is not null)
{
    @if (_user.StateMachines.Count <= 0)
    {
        <h2 style="text-align:center;">No other FSMs found.</h2>
    }
    else
    {
        <table class="fsm-list-container">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th class="date-created-col">Date Created</th>
                    <th class="date-modified-col">Date Modified</th>
                    <th style="width: @(_bulkDelete ? "9em" : "5em")">Delete</th>
                </tr>
            </thead>
            <tbody>
                @foreach (FiniteStateMachine fsm in _user.StateMachines)
                {
                    <tr @onclick="async (e) => await DisplayFsmAsync(fsm, true)">
                        <td>@fsm.Name</td>
                        <td>@fsm.Description</td>
                        <td class="date-created-col">@fsm.TimeCreated</td>
                        <td class="date-modified-col">@fsm.TimeUpdated</td>
                        <td>
                            @if (!_bulkDelete)
                            {
                                <button class="delete-button"
                                @onclick:stopPropagation
                                @onclick="async e => await DeleteFsms(fsm.Id)">
                                    Delete
                                </button>
                            }
                            else
                            {
                                <button @onclick:stopPropagation
                                @onclick="e => AddFsmToDelete(fsm.Id)"
                                style="@(_markDeleteFsms.Contains(fsm.Id)
                                ? "background-color:#a45cbd": null)">
                                    Mark for delete
                                </button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    }
}
else
{
    <div style="display:grid;">
        <Loading Height="10em" Width="10em"
        Style="border-width: 1em; justify-self: center;" />
    </div>
}

<canvas id="hiddenCanvas" style="display:none;"/>
@code
{
    [SupplyParameterFromQuery]
    [Parameter]
    public bool SaveCurrent { get; set; }
    private bool _saveFsm = false;

    private ApplicationUser? _user = null;
    /// <summary>
    /// Current FSM to be viewed.
    /// </summary>
    private FiniteStateMachine? _currentFsm = null;
    private FsmResultState _currentFsmResult = FsmResultState.Fail;
    /// <summary>
    /// Current FSM that can be drawn.
    /// </summary>
    private FiniteStateMachine? _currentDrawnFsm = null;
    private string _searchFsmQuery { get; set; } = string.Empty;
    private DateTime _lastRecentModifiedTime = DateTime.MaxValue;
    /// <summary>
    /// Recent updated times of first FSM in a page from most to least recent
    /// </summary>
    private List<DateTime> _recentModifiedTimes = [];
    private double _mainFsmSvgScale = 0.5;
    private bool _displayCurrentFsm = false;
    private bool _currentlySaving = false;
    private bool _currentSaved = false;
    private bool _finishLoading = false;
    private bool _searching = false;
    private bool _loadingFsmView = false;
    private bool _loadMoreFsms = false;
    private bool _loadPrevFsms = false;
    private bool _JsModuleDisposed = false;
    private bool _bulkDelete = false;
    private readonly List<Guid> _markDeleteFsms = [];
    private const string _canvasBackgroundColour = "#313338";
    private const string _colour = "#ffffff";
    private string _fsmSvgUrl = string.Empty;
    private string _errorMsg = "";

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += HandleLocationChangedAsync;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await SetJsModule("./Components/Pages/MyFSMs.razor.js");

        if (!_JsModuleDisposed && CheckJsModule(JsModule) && _currentDrawnFsm is null)
        {
            await JsModule.InvokeAsync<bool>("fSMCanvasUtils.getCanvasContext",
                "hiddenCanvas");
            FiniteStateMachine? fsm =
            await JsModule.InvokeAsync<FiniteStateMachine>("fSMCanvasUtils.loadFSM");
            if (fsm is not null
                && fsm.States is not null && fsm.States.Count > 0)
            {
                fsm.SanitiseFsm();
                _currentDrawnFsm = fsm;
                await GenerateFsmSvgAsync(_currentDrawnFsm, _mainFsmSvgScale);
            }
            StateHasChanged();
        }

        if (_user is null)
        {
            await InitialiseUserAsync();
            StateHasChanged();
        }
        if (SaveCurrent && _currentDrawnFsm is not null)
            await DisplayFsmAsync(_currentDrawnFsm);
        if (_saveFsm | SaveCurrent)
        {
            SaveCurrent = false;
            await SaveCurrentFSMAsync();
            await GetUserFsms(_lastRecentModifiedTime);
        }
    }

    /// <summary>
    /// Loads all the information needed to view the FSM
    /// </summary>
    /// <param name="fsm">Finite State Machine</param>
    /// <param name="reload">Reloads all of the states and transitions</param>
    private async Task DisplayFsmAsync(FiniteStateMachine fsm, bool reload = false)
    {
        _currentFsm = fsm;
        _loadingFsmView = true;
        _displayCurrentFsm = true;
        if (reload)
        {
            await using ApplicationDbContext dbContext =
                await DbFactory.CreateDbContextAsync();
            try
            {
                _currentFsmResult = await DBCommands.GetFullFsmAsync(dbContext, fsm, CancellationToken.None);
            }
            catch (Exception ex)
            {
                _currentFsmResult = FsmResultState.MetaDataOnly;
                _logger.LogError(ex, "Couldn't fully load Finite State Machine - ({Id}),  '{Name}'",
                fsm.Id, fsm.Name);
            }
        }

        try
        {
            await GenerateFsmSvgAsync(fsm, _mainFsmSvgScale);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Couldn't generate SVG of Finite State Machine - ({Id}),  '{Name}'",
            fsm.Id, fsm.Name);
        }
        _loadingFsmView = false;
    }

    private async Task QueryFsms(MouseEventArgs mouseEventArgs)
    {
        if (_user is not null)
        {
            _searching = true;
            StateHasChanged();
            try
            {
                await using ApplicationDbContext dbContext 
                    = await DbFactory.CreateDbContextAsync();
                _user.StateMachines = await dbContext.Users
                    .Where(user => user.Id == _user.Id)
                    .SelectMany(user => user.StateMachines)
                    .Where(fsm => fsm.Name.Contains(_searchFsmQuery)
                        || fsm.Description.Contains(_searchFsmQuery))
                    .ToListAsync();
            }
            catch (Exception ex)
            {
                _logger.LogError("Ran to problem trying to find FSMs from user {0}",
                _user.Id);
                _logger.LogError(new EventId(1, "Coudn't Find FSMs"), ex,
                "Coudn't Find FSMs");
            }
            _searching = false;
        }
    }

    /// <summary>
    /// Sets the specified FSM to be the one to be currently drawn.
    /// </summary>
    /// <param name="fsm">Finite State Machine</param>
    private async Task SetDrawingFsmAsync(FiniteStateMachine fsm)
    {
        if (_user is not null)
        {
            if (CheckJsModule(JsModule))
            {
                _errorMsg = "";
                await JsModule.InvokeVoidAsync("fSMCanvasUtils.saveFSM", fsm);

                _currentDrawnFsm = await JsModule.InvokeAsync<FiniteStateMachine>(
                    "fSMCanvasUtils.loadFSM",
                    fsm);

                if (_currentDrawnFsm is null)
                {
                    _errorMsg = $"Couldn't set the FSM '{fsm.Name}' to drawable";
                    _logger.LogError("Couldn't set the FSM {Name} to drawable", fsm.Name);
                }
            }
        }
    }

    private void CloseDisplayFsmHandler(MouseEventArgs mouseEventArgs)
    {
        _displayCurrentFsm = false;
        _currentSaved = false;
        Navigation.NavigateTo("MyFSMs");
    }

    private async void GetMoreFsmsHandler(MouseEventArgs mouseEventArgs)
    {
        if (_user is not null)
        {
            await using ApplicationDbContext dbContext =
                await DbFactory.CreateDbContextAsync();
            try
            {
                _loadMoreFsms = await DBCommands.FetchPageFsmsAsync(dbContext, _user,
                    _lastRecentModifiedTime, _userConfig.Value.VisibleFsmsLimit);
                _recentModifiedTimes.Add(_lastRecentModifiedTime);
                _lastRecentModifiedTime = _user.StateMachines.Last().TimeUpdated;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                _logger.LogError("Couldn't load more FSMs");
                _logger.LogError("{ERROR}", ex.ToString());
            }
        }
    }

    private async Task<bool> DeleteFsms(params Guid[] ids)
    {
        _errorMsg = "";
        bool result = false;
        if (_user is not null)
        {
            await using DbContext dbContext = await DbFactory.CreateDbContextAsync();
            result = await DBCommands.DeleteFsms(dbContext, _logger, ids);
            if (!result)
            {
                _errorMsg = "Something went wrong trying to delete FSM";
                if (ids.Length > 1)
                    _errorMsg += "s";
            }

            _user.StateMachines = _user.StateMachines
                .Where(fsm => !ids.Contains(fsm.Id)).ToList();
        }

        return result;
    }

    private void AddFsmToDelete(Guid id)
    {
        if (_markDeleteFsms.Contains(id))
            _markDeleteFsms.Remove(id);
        else
            _markDeleteFsms.Add(id);
    }

    private async void RevokeUrlAsync(string url)
        => await JS.InvokeVoidAsync("URL.revokeObjectURL", url);

    private void SetSaveCurrent(MouseEventArgs mouseEventArgs) => _saveFsm = true;

    private async void HandleLocationChangedAsync(object? sender,
        LocationChangedEventArgs e)
    {
        await SetJsModule("./Components/Pages/MyFSMs.razor.js");
        if (CheckJsModule(JsModule) && _currentDrawnFsm is not null)
            await JsModule.InvokeVoidAsync("fSMCanvasUtils.saveFSM", _currentDrawnFsm);
        _JsModuleDisposed = true;
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= HandleLocationChangedAsync;
    }
}