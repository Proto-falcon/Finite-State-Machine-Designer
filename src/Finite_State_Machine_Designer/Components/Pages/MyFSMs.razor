@page "/MyFSMs"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Options
@using Configuration
@using Services
@inherits ModuleCheckBaseComponent
@rendermode InteractiveServer
@implements IDisposable
@inject UserService userService
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Navigation
@inject IOptions<UsersConfig> _userConfig
@inject ILogger<MyFSMs> _logger
@attribute [Authorize]

<PageTitle>My State Machines</PageTitle>
<SectionContent SectionId="RCL.Layout.MainLayout.TopBarSection">
    <h1>Finite State Machines</h1>
</SectionContent>

<div class="current-fsm-section"
    style="@(!_displayCurrentFsm ? "display:none;" : "")
    @(_loadingFsmView | _currentFsm is null ? "grid-template-columns: 1fr;" : "")">
    @if (_loadingFsmView)
    { <Loading Height="10em" Width="10em"
        Style="border-width: 1em; justify-self: center;" />
    }
    else if (_currentFsm is null)
    {
        <p>
            <h2 class="no-fsm-display">No FSM to display.</h2>
            <button @onclick="CloseDisplayFsmHandler">✖️</button>
        </p>
    }
    else
    {
        switch (_currentFsmResult)
        {
            case FsmResultState.Success:
                <div>
                    <div class="canvas-name-group canvas-info-group">
                        <h2><label for="canvasName">Name: @_currentFsm.Name</label></h2>
                        <input id="canvasName" class="canvas-name" type="text"
                        name="name" placeholder="Name"
                        @bind:event="oninput" @bind="_currentFsm.Name" />
                    </div>
                    <div class="save-section">
                        @if (_currentlySaving)
                        {
                            <Loading Height="1.5em" Width="1.5em"
                            Style="border-width: 0.2em;" />
                        }
                        else if (_currentDrawnFsm is not null
                        && _currentDrawnFsm.Name == _currentFsm.Name)
                        {
                            <button class="inline-button"
                            @onclick="SetSaveCurrent">
                                Save
                            </button>
                        }
                        else
                        {
                            <button class="inline-button"
                            @onclick="async (e) => await SetDrawingFsmAsync(_currentFsm)">
                                Draw
                            </button>
                        }
                        @if (!string.IsNullOrWhiteSpace(_errorMsg))
                        {
                            <p class="blink">@_errorMsg</p>
                        }
                        else if (_currentSaved)
                        {
                            <p class="blink">Saved!!</p>
                        }
                    </div>
                    <p class="canvas-desc-summary">Description</p>
                    <div class="canvas-desc-group canvas-info-group">
                        <label class="canvas-desc-label" for="canvasDesc">Description:</label>
                        <textarea id="canvasDesc" name="Description"
                        readonly="@(_currentDrawnFsm is null
                    || _currentDrawnFsm.Name != _currentFsm.Name)"
                        placeholder="Description" rows="10" cols="69"
                        @bind:event="oninput" @bind="_currentFsm.Description" />
                    </div>
                </div>
                <div class="fsm-svg-section">
                    <button @onclick="CloseDisplayFsmHandler">✖️</button>
                    <img class="fsm-svg" @onload="e => RevokeUrlAsync(_fsmSvgUrl)"
                    src="@_fsmSvgUrl" />
                </div>
                break;
            case FsmResultState.MetaDataOnly:
                <div>
                    <div class="canvas-name-group canvas-info-group">
                        <h2><label for="canvasName">Name: @_currentFsm.Name</label></h2>
                        <input id="canvasName" class="canvas-name" type="text"
                        name="name" placeholder="Name"
                        @bind:event="oninput" @bind="_currentFsm.Name" />
                    </div>
                    <div class="save-section">
                        @if (_currentlySaving)
                        {
                            <Loading Height="1.5em" Width="1.5em"
                            Style="border-width: 0.2em;" />
                        }
                        else if (_currentDrawnFsm is not null
                        && _currentDrawnFsm.Name == _currentFsm.Name)
                        {
                            <button class="inline-button"
                            @onclick="SetSaveCurrent">
                                Save
                            </button>
                        }
                        else
                        {
                            <button class="inline-button"
                            @onclick="async (e) => await SetDrawingFsmAsync(_currentFsm)">
                                Draw
                            </button>
                        }
                        @if (!string.IsNullOrWhiteSpace(_errorMsg))
                        {
                            <p class="blink">@_errorMsg</p>
                        }
                        else if (_currentSaved)
                        {
                            <p class="blink">Saved!!</p>
                        }
                    </div>
                    <p class="canvas-desc-summary">Description</p>
                    <div class="canvas-desc-group canvas-info-group">
                        <label class="canvas-desc-label" for="canvasDesc">Description:</label>
                        <textarea id="canvasDesc" name="Description"
                        readonly="@(_currentDrawnFsm is null
                    || _currentDrawnFsm.Name != _currentFsm.Name)"
                        placeholder="Description" rows="10" cols="69"
                        @bind:event="oninput" @bind="_currentFsm.Description" />
                    </div>
                </div>
                <div class="fsm-svg-section">
                    <button @onclick="CloseDisplayFsmHandler">✖️</button>
                    <h2>Couldn't preview Finite State Machine.</h2>
                </div>
                break;
            default:
                <p>
                    <h2 class="no-fsm-display">No FSM to display.</h2>
                    <button @onclick="CloseDisplayFsmHandler">✖️</button>
                </p>
                break;
        }
    }
</div>
@if (_finishLoading && _user is not null)
{
    @if (_user.StateMachines.Count <= 0)
    {
        <h2 style="text-align:center;">No other FSMs found.</h2>
    }
    else
    {
        <FsmTable 
        ClickRowHandler="DisplayFsmAsync"
        CurrentDrawnFsm="_currentDrawnFsm"
        DisplayCurrentDrawnFsmHandler="async e => await DisplayFsmAsync(_currentDrawnFsm)"
        User="_user"
        SetErrorMsg="text => _errorMsg = text"/>
    }
}
else
{
    <div style="display:grid;">
        <Loading Height="10em" Width="10em"
        Style="border-width: 1em; justify-self: center;" />
    </div>
}

<canvas id="hiddenCanvas" style="display:none;"/>
@code
{
    [SupplyParameterFromQuery]
    [Parameter]
    public bool SaveCurrent { get; set; }
    private bool _saveFsm = false;

    private ApplicationUser? _user = null;
    /// <summary>
    /// Current FSM to be viewed.
    /// </summary>
    private FiniteStateMachine? _currentFsm = null;
    private FsmResultState _currentFsmResult = FsmResultState.Fail;
    /// <summary>
    /// Current FSM that can be drawn.
    /// </summary>
    private FiniteStateMachine? _currentDrawnFsm = null;
    private DateTime _lastRecentModifiedTime = DateTime.MaxValue;
    /// <summary>
    /// Recent updated times of first FSM in a page from most to least recent
    /// </summary>
    private List<DateTime> _recentModifiedTimes = [];
    private double _mainFsmSvgScale = 0.5;
    private bool _displayCurrentFsm = false;
    private bool _currentlySaving = false;
    private bool _currentSaved = false;
    private bool _finishLoading = false;
    private bool _loadingFsmView = false;
    private bool _loadMoreFsms = false;
    private bool _loadPrevFsms = false;
    private bool _JsModuleDisposed = false;
    private const string _canvasBackgroundColour = "#313338";
    private const string _colour = "#ffffff";
    private string _fsmSvgUrl = string.Empty;
    private string _errorMsg = "";

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += HandleLocationChangedAsync;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await SetJsModule("./Components/Pages/MyFSMs.razor.js");

        if (!_JsModuleDisposed && CheckJsModule(JsModule) && _currentDrawnFsm is null)
        {
            await JsModule.InvokeAsync<bool>("fSMCanvasUtils.getCanvasContext",
                "hiddenCanvas");
            FiniteStateMachine? fsm =
            await JsModule.InvokeAsync<FiniteStateMachine>("fSMCanvasUtils.loadFSM");
            if (fsm is not null
                && fsm.States is not null && fsm.States.Count > 0)
            {
                fsm.SanitiseFsm();
                _currentDrawnFsm = fsm;
                await GenerateFsmSvgAsync(_currentDrawnFsm, _mainFsmSvgScale);
            }
            StateHasChanged();
        }

        if (_user is null)
        {
            await InitialiseUserAsync();
            StateHasChanged();
        }
        if (SaveCurrent && _currentDrawnFsm is not null)
            await DisplayFsmAsync(_currentDrawnFsm);
        if (_saveFsm | SaveCurrent)
        {
            SaveCurrent = false;
            await SaveCurrentFSMAsync();
            await GetUserFsms(_lastRecentModifiedTime);
        }
    }

    /// <summary>
    /// Loads all the information needed to view the FSM
    /// </summary>
    /// <param name="fsm">Finite State Machine</param>
    /// <param name="reload">Reloads all of the states and transitions</param>
    private async Task DisplayFsmAsync(FiniteStateMachine fsm, bool reload = false)
    {
        _currentFsm = fsm;
        _loadingFsmView = true;
        _displayCurrentFsm = true;
        StateHasChanged();
        if (reload)
        {
            await using ApplicationDbContext dbContext =
                await DbFactory.CreateDbContextAsync();
            try
            {
                _currentFsmResult = await DBCommands.GetFullFsmAsync(dbContext, fsm, CancellationToken.None);
            }
            catch (Exception ex)
            {
                _currentFsmResult = FsmResultState.MetaDataOnly;
                _logger.LogError(ex, "Couldn't fully load Finite State Machine - ({Id}),  '{Name}'",
                fsm.Id, fsm.Name);
            }
        }

        try
        {
            await GenerateFsmSvgAsync(fsm, _mainFsmSvgScale);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Couldn't generate SVG of Finite State Machine - ({Id}),  '{Name}'",
            fsm.Id, fsm.Name);
        }
        _loadingFsmView = false;
        StateHasChanged();
    }

    /// <summary>
    /// Sets the specified FSM to be the one to be currently drawn.
    /// </summary>
    /// <param name="fsm">Finite State Machine</param>
    private async Task SetDrawingFsmAsync(FiniteStateMachine fsm)
    {
        if (_user is not null)
        {
            if (CheckJsModule(JsModule))
            {
                _errorMsg = "";
                await JsModule.InvokeVoidAsync("fSMCanvasUtils.saveFSM", fsm);

                _currentDrawnFsm = await JsModule.InvokeAsync<FiniteStateMachine>(
                    "fSMCanvasUtils.loadFSM",
                    fsm);

                if (_currentDrawnFsm is null)
                {
                    _errorMsg = $"Couldn't set the FSM '{fsm.Name}' to drawable";
                    _logger.LogError("Couldn't set the FSM {Name} to drawable", fsm.Name);
                }
            }
        }
    }

    private void CloseDisplayFsmHandler(MouseEventArgs mouseEventArgs)
    {
        _displayCurrentFsm = false;
        _currentSaved = false;
        Navigation.NavigateTo("MyFSMs");
    }

    private async void GetMoreFsmsHandler(MouseEventArgs mouseEventArgs)
    {
        if (_user is not null)
        {
            await using ApplicationDbContext dbContext =
                await DbFactory.CreateDbContextAsync();
            try
            {
                _loadMoreFsms = await DBCommands.FetchPageFsmsAsync(dbContext, _user,
                    _lastRecentModifiedTime, _userConfig.Value.VisibleFsmsLimit);
                _recentModifiedTimes.Add(_lastRecentModifiedTime);
                _lastRecentModifiedTime = _user.StateMachines.Last().TimeUpdated;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                _logger.LogError("Couldn't load more FSMs");
                _logger.LogError("{ERROR}", ex.ToString());
            }
        }
    }

    private async void RevokeUrlAsync(string url)
        => await JS.InvokeVoidAsync("URL.revokeObjectURL", url);

    private void SetSaveCurrent(MouseEventArgs mouseEventArgs) => _saveFsm = true;

    private async void HandleLocationChangedAsync(object? sender,
        LocationChangedEventArgs e)
    {
        await SetJsModule("./Components/Pages/MyFSMs.razor.js");
        if (CheckJsModule(JsModule) && _currentDrawnFsm is not null)
            await JsModule.InvokeVoidAsync("fSMCanvasUtils.saveFSM", _currentDrawnFsm);
        _JsModuleDisposed = true;
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= HandleLocationChangedAsync;
    }
}