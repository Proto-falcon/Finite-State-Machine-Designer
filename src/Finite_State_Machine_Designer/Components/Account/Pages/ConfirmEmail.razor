@page "/Account/ConfirmEmail"
@page "/Account/ConfirmLogin/{Provider}"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Finite_State_Machine_Designer.Data;
@using Finite_State_Machine_Designer.Data.Identity

@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject SignInManager<ApplicationUser> SignInManager

@if (!string.IsNullOrWhiteSpace(Provider))
{
    <PageTitle>@Provider Login</PageTitle>
    <h1>@Provider Login</h1>
}
else
{
    <PageTitle>Confirm email</PageTitle>
    <h1>Confirm email</h1>
}

<StatusMessage Message="@statusMessage" />

@code {
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    [Parameter]
    public string Provider { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Code is null)
            RedirectManager.RedirectTo("");

        var user = await UserManager.FindByIdAsync(UserId);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = $"Error loading user with ID {UserId}";
        }
        else
        {
            var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
            if (user.EmailConfirmed)
            {
                if (string.IsNullOrWhiteSpace(Provider))
                    statusMessage = "Thank you for confirming your email.";
                else
                    statusMessage = $"Thank you for logging in with {Provider}.";
                return;
            }

            var result = await UserManager.ConfirmEmailAsync(user, code);
            if (result.Succeeded)
            {
                if (!string.IsNullOrWhiteSpace(Provider))
                {
                    await SignInManager.SignInAsync(user, false, Provider);
                    if (result.Succeeded)
                        RedirectManager.RedirectTo(HttpContext.Request.Path,
                            new Dictionary<string, object?> { ["userId"] = UserId, ["code"] = Code });
                    statusMessage = $"Error logging in with {Provider}.";
                }
                else
                {
                    await SignInManager.SignInAsync(user, false);
                    if (result.Succeeded)
                        RedirectManager.RedirectTo(HttpContext.Request.Path,
                            new Dictionary<string, object?> { ["userId"] = UserId, ["code"] = Code });
                    statusMessage = "Error confirming your email.";
                }
            }
        }
    }
}
