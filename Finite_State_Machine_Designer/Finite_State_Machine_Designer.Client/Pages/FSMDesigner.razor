@page "/designer"
@using Components
@using FSM
@inherits ModuleCheckBaseComponent
@rendermode InteractiveWebAssembly
@implements IAsyncDisposable
@inject IJSRuntime JS

<PageTitle>Finite State Machine Designer</PageTitle>

<DynamicComponent Type="@_canvasLoaded" Parameters="_canvasDimensions" />

<div>
	<p>
		The big white box above is the FSM designer.&nbsp; Here's how to
		use it:
	</p>
	<ul>
		<li><b>Add a state:</b> double-click on the canvas</li>
		<li><b>Add an arrow:</b> shift-drag on the canvas</li>
		<li><b>Move something:</b> drag it around</li>
		<li>
			<b>Delete something:</b> click it and press the delete key
			(not the backspace key)
		</li>
	</ul>
	<ul>
		<li>
			<b>Make accept state:</b> double-click on an existing state
		</li>
		<li>
			<b>Type numeric subscript:</b> put an underscore before the
			number (like "S_0")
		</li>
		<li>
			<b>Type greek letter:</b> put a backslash before it (like
			"\beta")
		</li>
	</ul>
	<p>
		This was made in Blazor and JavaScript Interop using the canvas element.
	</p>
</div>
<p>
	Created by <a href="https://madebyevan.com/">Evan Wallace</a> in
	2010
</p>
<p>Modified by <b>Tobi Adeniji</b> in 2024</p>

@code {
	IJSObjectReference? module;
	private Dictionary<string, object> _canvasDimensions = new();
	private Type? _canvasLoaded = typeof(Loading);

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/FSMDesigner.razor.js");
			await SetCanvasDimensions();
		}
	}

	private async ValueTask SetCanvasDimensions()
	{
		if (CheckJsModule(module))
		{
			int[] dimensions = await module.InvokeAsync<int[]>("getWindowDimensions");

			int width = (int)(dimensions[0] * 0.8);
			int height = (int)(dimensions[1] * 0.8);

			_canvasDimensions.TryAdd("Height", width);
			_canvasDimensions.TryAdd("Width", height);
			_canvasLoaded = typeof(FSMCanvas);

			StateHasChanged();
		}
	}

	async ValueTask IAsyncDisposable.DisposeAsync()
	{
		if (module is not null)
		{
			await module.DisposeAsync();
		}
	}
}
