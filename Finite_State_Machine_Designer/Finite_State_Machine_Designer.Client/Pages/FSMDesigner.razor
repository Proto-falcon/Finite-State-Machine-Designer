@page "/designer"
@using FSM
@inherits ModuleCheckBaseComponent
@rendermode InteractiveWebAssembly
@inject NavigationManager Navigation

<PageTitle>Finite State Machine Designer</PageTitle>

<SectionContent SectionId="MainLayout.TopBarSection">
	<h1>Finite State Designer</h1>
</SectionContent>

<DynamicComponent Type="@_canvasLoaded" Parameters="_canvasParams" />

<div>
	<p>
		The big white box above is the FSM designer.&nbsp; Here's how to
		use it:
	</p>
	<ul>
		<li><b>Add a state:</b> double-click on the canvas</li>
		<li><b>Add an arrow:</b> shift-drag on the canvas</li>
		<li><b>Move something:</b> drag it around</li>
		<li><b>Type in a state:</b> press keys</li>
		<li><b>Resize a state:</b> hold control and mouse down near the edge of the state then move it</li>
		<li>
			<b>Delete something:</b> click it and press the delete key
			(not the backspace key)
		</li>
	</ul>
	<ul>
		<li>
			<b>Make accept state:</b> double-click on an existing state
		</li>
		<li>
			<b>Type numeric subscript:</b> click button 'aₓ' at top of page or do 'ctrl+.' to toggle subscript
		</li>
		<li>
			<b>Type numeric superscript:</b> click button 'aˣ' at top of page or do 'ctrl+,' to toggle superscript
		</li>
		<li>
			<b>Type greek letter:</b> put a backslash before it (like
			"\beta")
		</li>
	</ul>
	<p>
		This was made in Blazor and JavaScript Interop using the canvas element.
	</p>
</div>
<p>Created by <b>Tobi Adeniji</b> in 2024</p>
<p>
	Inspired by <a href="https://madebyevan.com/">Evan Wallace's</a>
	<a href="https://madebyevan.com/fsm/">Finite Machine Designer</a> in 2010
</p>
<p>
	And modifications from
	<a href="https://www.cs.unc.edu/~otternes/">Nathan Otterness's</a> - 
	<a href="https://www.cs.unc.edu/~otternes/comp455/fsm_designer/">FSM Designer</a> in 2019
</p>

@code {
	private Dictionary<string, object> _canvasParams = new();
	private Type? _canvasLoaded = typeof(Loading);

	private bool _mustRetryContext = false;

	protected override void OnInitialized()
	{
		Navigation.LocationChanged += HandleLocationChanged;
	}

	private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
	{
		string path = e.Location.Substring(e.Location.LastIndexOf('/'));

		if (path == "/designer")
		{
			_mustRetryContext = true;
			if (_canvasParams.ContainsKey("MustRetryContext"))
			{
				_canvasParams["MustRetryContext"] = _mustRetryContext;
			}
			StateHasChanged();
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await SetJsModule("./Pages/FSMDesigner.razor.js");
			await SetCanvasDimensions();
		}
	}

	private async ValueTask SetCanvasDimensions()
	{
		if (CheckJsModule(JsModule))
		{
			int[] dimensions = await JsModule.InvokeAsync<int[]>("getWindowDimensions");

			int width = (int)(dimensions[0] * 0.8);
			int height = (int)(dimensions[1] * 0.8);

			_canvasParams.TryAdd("Height", width);
			_canvasParams.TryAdd("Width", height);
			_canvasParams.TryAdd("MustRetryContext", _mustRetryContext);
			_canvasLoaded = typeof(FSMCanvas);

			StateHasChanged();
		}
	}
}
