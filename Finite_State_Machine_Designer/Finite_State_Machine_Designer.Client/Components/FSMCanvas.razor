@using FSM
@inherits ModuleCheckBaseComponent
@inject ILogger<FSMCanvas> logger

<div class="center">
	Export as:
	<a href="javascript:saveAsPNG()"
	   download>PNG</a>
	   |
	<a href="javascript:saveAsSVG()"
	   download>SVG</a>
	|
	<a href="javascript:saveAsLaTeX()"
	   download>LaTeX</a>
</div>

<canvas
	id="FSMCanvas"
	@ref="_canvasElement"
	contenteditable="true"
	height="@Height"
	width="@Width"
	@onmousedown:preventDefault
	@onmousedown="ClicksStateHandler"
	@onkeydown:preventDefault
	@onkeydown="KeyHandler"
	@onmousemove="MoveState"
>
	Your browser does not support the HTML5 &lt;canvas&gt;
	element.
</canvas>

@code {
	[Parameter]
	public int Height { get; set; } = 150;

	[Parameter]
	public int Width { get; set; } = 300;

	[Parameter]
	public bool MustRetryContext { get; set; } = false;

	private ElementReference? _canvasElement;

	private FiniteStateMachine _fSM = new FiniteStateMachine();

	/// <summary>
	/// X co-ordinate relative in the canvas space.
	/// </summary>
	private int _mouseX;
	/// <summary>
	/// Y co-ordinate relative in the canvas space.
	/// </summary>
	private int _mouseY;

	private float _defalutStateRadius = 30;
	private bool _canvasHasFocus = false;

	private const string _selectedStateColour = "#0000ff";
	private const string _stateColour = "#000000";

	private readonly string[] _specialSymbolNames = new string[] { 
		"Alpha",
		"Beta",
		"Gamma",
		"Delta",
		"Epsilon",
		"Zeta",
		"Eta",
		"Theta",
		"Iota",
		"Kappa",
		"Lambda",
		"Mu",
		"Nu",
		"Xi",
		"Omicron",
		"Pi",
		"Rho",
		"Sigma",
		"Tau",
		"Upsilon",
		"Phi",
		"Chi",
		"Psi",
		"Omega",
		"emptyset",
		"rightarrow",
		"leftarrow",
	};

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await SetJsModule("./Components/FSMCanvas.razor.js");

			if (CheckJsModule(JsModule))
				await JsModule.InvokeAsync<bool>("getCanvasContext", "FSMCanvas");
		}
		if (CheckJsModule(JsModule) && MustRetryContext)
		{
			var isCreated = await JsModule.InvokeAsync<bool>("getCanvasContext", "FSMCanvas");

			if (isCreated)
			{
				MustRetryContext = false;
			}
			else
			{
				logger.LogError("Couldn't get 2d context");
			}

		}

		if (_canvasElement != null && _canvasHasFocus)
		{
			await _canvasElement.Value.FocusAsync(true);
			_canvasHasFocus = false;
		}
	}

	private void SetMouseCoords(double x, double y)
	{
		_mouseX = (int)x;
		_mouseY = (int)y;
	}

	private async ValueTask<bool> CreateState(CanvasCoordinate coordinate)
	{
		if (CheckJsModule(JsModule))
		{
			bool isCreated = await JsModule.InvokeAsync<bool>(
						"drawState",
						new object[]
						{
							_mouseX,
							_mouseY,
							_defalutStateRadius,
							_selectedStateColour
						}
					);

			if (!isCreated)
				return false;

			coordinate = new CanvasCoordinate(_mouseX, _mouseY);
			_fSM.AddState(coordinate, _defalutStateRadius);

			return true;
		}
		return false;
	}

	private async ValueTask<bool> DrawMachine(CanvasCoordinate? selectedCoords = null)
	{
		if (CheckJsModule(JsModule)
		&& await JsModule.InvokeAsync<bool>("clearCanvas"))
		{
			bool hasSelectedState = false;
			string currentColour = _stateColour;
			foreach (FiniteState state in _fSM.States)
			{
				currentColour = _stateColour;

				if (
					selectedCoords != null
					&& state.Coordinate == selectedCoords
				)
				{
					currentColour = _selectedStateColour;
					hasSelectedState = true;
				}

				_ = await JsModule.InvokeAsync<bool>(
					"drawState",
					state.Coordinate.X,
					state.Coordinate.Y,
					state.Radius,
					currentColour,
					state.Text
				);
			}
			return hasSelectedState;
		}
		return false;
	}

	private async Task KeyHandler(KeyboardEventArgs keyboardEventArgs)
	{
		switch (keyboardEventArgs.Key.ToLower())
		{
			case "backspace":
				if (_fSM.SelectedState != null && _fSM.SelectedState.Text.Length > 0  && CheckJsModule(JsModule))
				{
					var text = _fSM.SelectedState.Text;
					_fSM.SelectedState.Text = text.Substring(0, text.Length-1);
					var coordinate = _fSM.SelectedState.Coordinate;
					await DrawMachine(coordinate);
				}
				break;
			case "delete":
				await DeleteState(keyboardEventArgs);
				break;
			case " ":
			default:
				var hasNoSpecialKeys = !keyboardEventArgs.MetaKey
				&& !keyboardEventArgs.CtrlKey
				&& !keyboardEventArgs.AltKey;
				if (hasNoSpecialKeys
					&& keyboardEventArgs.Key.Length == 1
					&& _fSM.SelectedState != null
					&& CheckJsModule(JsModule))
				{
					_fSM.SelectedState.Text += keyboardEventArgs.Key;
					var coordinate = _fSM.SelectedState.Coordinate;
					await DrawMachine(coordinate);
				}
				break;
		}
	}

	private async ValueTask DeleteState(KeyboardEventArgs keyboardEventArgs)
	{
		if (CheckJsModule(JsModule)
			&& _fSM.SelectedState != null
			&& _fSM.RemoveState(_fSM.SelectedState.Coordinate))
		{
			_ = await DrawMachine();
		}
	}

	private async Task MoveState(MouseEventArgs mouseEventArgs)
	{
		if (CheckJsModule(JsModule)
		&& _fSM.SelectedState != null
		&& mouseEventArgs.Buttons > 0
		&& mouseEventArgs.Buttons <= 3)
		{
			SetMouseCoords(mouseEventArgs.OffsetX, mouseEventArgs.OffsetY);
			var coords = new CanvasCoordinate(_mouseX, _mouseY);

			_fSM.SelectedState.Coordinate = coords;

			_ = await DrawMachine(_fSM.SelectedState.Coordinate);

		}
	}

	private async Task ClicksStateHandler(MouseEventArgs mouseEventArgs)
	{
		if (CheckJsModule(JsModule))
		{
			SetMouseCoords(mouseEventArgs.OffsetX, mouseEventArgs.OffsetY);
			var coordinate = new CanvasCoordinate(_mouseX, _mouseY);
			FiniteState? existingState = _fSM.FindState(coordinate);

			if (existingState == null && mouseEventArgs.Detail == 2)
			{
				bool isCreated = await CreateState(coordinate);

				if (!isCreated)
					logger.LogError("State to be created at {Coordinate} failed to be created", coordinate);

				return;
			}

			FiniteState? prevSelectedState = _fSM.SelectedState;

			_fSM.SelectedState = existingState;

			if (prevSelectedState != _fSM.SelectedState)
			{
				_ = await DrawMachine(_fSM.SelectedState?.Coordinate);
			}

		}
		if (_canvasElement != null)
		{
			_canvasHasFocus = true;
		}
	}
}
