@using FSM
@inherits ModuleCheckBaseComponent
@implements IAsyncDisposable
@inject ILogger<FSMCanvas> logger

<div class="center">
	Export as:
	<a href="javascript:saveAsPNG()"
	   download>PNG</a>
	   |
	<a href="javascript:saveAsSVG()"
	   download>SVG</a>
	|
	<a href="javascript:saveAsLaTeX()"
	   download>LaTeX</a>
</div>

<canvas
	id="FSMCanvas"
	@ref="_canvasElement"
	contenteditable="true"
	height="@Height"
	width="@Width"
	@onmousedown:preventDefault
	@onmousedown="ClicksStateHandler"
	@onkeydown:preventDefault
	@onkeydown="KeyHandler"
	@onmousemove="MoveState"
	@onblur="DeselectState"
>
	Your browser does not support the HTML5 &lt;canvas&gt;
	element.
</canvas>

@code {
	[Parameter]
	public int Height { get; set; } = 150;

	[Parameter]
	public int Width { get; set; } = 300;

	[Parameter]
	public bool MustRetryContext { get; set; } = false;

	private ElementReference? _canvasElement;

	private FiniteStateMachine _fSM = new FiniteStateMachine();

	private Timer? _drawTimer;
	private bool _stopTimer;
	private bool _lineVisible = true;
	private int _drawTimerInterval = 500;
	private DateTime _lastDrawTimerCall = DateTime.Now;

	/// <summary>
	/// X co-ordinate relative in the canvas space.
	/// </summary>
	private int _mouseX;
	/// <summary>
	/// Y co-ordinate relative in the canvas space.
	/// </summary>
	private int _mouseY;

	private float _defalutStateRadius = 30;
	private bool _canvasHasFocus = false;

	private const string _selectedStateColour = "#0000ff";
	private const string _stateColour = "#000000";

	private readonly string[] _specialSymbolNames = new string[] { 
		"Alpha",
		"Beta",
		"Gamma",
		"Delta",
		"Epsilon",
		"Zeta",
		"Eta",
		"Theta",
		"Iota",
		"Kappa",
		"Lambda",
		"Mu",
		"Nu",
		"Xi",
		"Omicron",
		"Pi",
		"Rho",
		"Sigma",
		"Tau",
		"Upsilon",
		"Phi",
		"Chi",
		"Psi",
		"Omega",
		"emptyset",
		"rightarrow",
		"leftarrow",
	};

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_drawTimer = _drawTimer = new Timer(DrawMachineTimer, null, 0, _drawTimerInterval);

			await SetJsModule("./Components/FSMCanvas.razor.js");

			if (CheckJsModule(JsModule))
				await JsModule.InvokeAsync<bool>("getCanvasContext", "FSMCanvas");
		}
		if (CheckJsModule(JsModule) && MustRetryContext)
		{
			var isCreated = await JsModule.InvokeAsync<bool>("getCanvasContext", "FSMCanvas");

			if (isCreated)
				MustRetryContext = false;
			else
				logger.LogError("Couldn't get 2d context");
		}

		if (_canvasElement != null && _canvasHasFocus)
		{
			await _canvasElement.Value.FocusAsync(true);
			_canvasHasFocus = false;
		}

		if (_fSM.SelectedState != null
			&& _drawTimer != null
			&& (DateTime.Now - _lastDrawTimerCall) > TimeSpan.FromMilliseconds(_drawTimerInterval * 1.1))
		{
			await _drawTimer.DisposeAsync();

			_drawTimer = new Timer(DrawMachineTimer, null, 0, _drawTimerInterval);
		}
	}

	private void SetMouseCoords(double x, double y)
	{
		_mouseX = (int)x;
		_mouseY = (int)y;
	}

	private async Task ClicksStateHandler(MouseEventArgs mouseEventArgs)
	{
		if (CheckJsModule(JsModule))
		{
			SetMouseCoords(mouseEventArgs.OffsetX, mouseEventArgs.OffsetY);
			var coordinate = new CanvasCoordinate(_mouseX, _mouseY);
			FiniteState? existingState = _fSM.FindState(coordinate);

			if (existingState == null && mouseEventArgs.Detail == 2)
			{
				bool isCreated = await CreateState(coordinate);
				_stopTimer = !isCreated;
				if (!isCreated)
					logger.LogError("State to be created at {Coordinate} failed to be created", coordinate);

				return;
			}

			FiniteState? prevSelectedState = _fSM.SelectedState;

			_fSM.SelectedState = existingState;

			if (prevSelectedState != _fSM.SelectedState)
			{
				switch (_fSM.SelectedState)
				{
					case null:
						_stopTimer = true;
						await DrawMachineAsync();
						break;
					default:
						_stopTimer = false;
						_lineVisible = true;
						await DrawMachineAsync();
						break;
				}
			}

		}
		if (_canvasElement != null)
			_canvasHasFocus = true;
	}

	private async Task KeyHandler(KeyboardEventArgs keyboardEventArgs)
	{
		if (CheckJsModule(JsModule))
		{
			switch (keyboardEventArgs.Key.ToLower())
			{
				case "backspace":
					if (_fSM.SelectedState != null && _fSM.SelectedState.Text.Length > 0)
					{
						var text = _fSM.SelectedState.Text;
						_fSM.SelectedState.Text = text.Substring(0, text.Length-1);
						var coordinate = _fSM.SelectedState.Coordinate;

						_lineVisible = true;
						await DrawMachineAsync();
					}
					break;
				case "delete":
					if (_fSM.SelectedState != null
						&& _fSM.RemoveState(_fSM.SelectedState))
						await DrawMachineAsync();
					break;
				default:
					var hasNoSpecialKeys = !keyboardEventArgs.MetaKey
					&& !keyboardEventArgs.CtrlKey
					&& !keyboardEventArgs.AltKey;
					if (hasNoSpecialKeys
						&& keyboardEventArgs.Key.Length == 1
						&& _fSM.SelectedState != null)
					{
						_fSM.SelectedState.Text += keyboardEventArgs.Key != "spacebar" ? keyboardEventArgs.Key : " ";
						_lineVisible = true;
						await DrawMachineAsync();
					}
					break;
			}
		}
	}

	private async ValueTask<bool> CreateState(CanvasCoordinate coordinate)
	{
		if (CheckJsModule(JsModule))
		{
			bool isCreated = await JsModule.InvokeAsync<bool>(
				"drawState",
				new object?[]
				{
					_mouseX,
					_mouseY,
					_defalutStateRadius,
					_selectedStateColour,
					Array.Empty<string>(),
					true
				}
			);

			if (!isCreated)
				return false;

			coordinate = new CanvasCoordinate(_mouseX, _mouseY);
			_fSM.AddState(coordinate, _defalutStateRadius);

			return true;
		}
		return false;
	}

	private async void DrawMachineTimer(object? obj)
	{
		if (!_stopTimer)
			await DrawMachineAsync();
		_lineVisible = !_lineVisible;
		_lastDrawTimerCall = DateTime.Now;
	}

	private async ValueTask<bool> DrawMachineAsync()
	{
		if (CheckJsModule(JsModule)
		&& await JsModule.InvokeAsync<bool>("clearCanvas"))
		{
			bool editable = false;
			string currentColour = _stateColour;

			foreach (FiniteState state in _fSM.States)
			{
				editable = false;
				currentColour = _stateColour;

				if (state == _fSM.SelectedState)
				{
					currentColour = _selectedStateColour;
					editable = true;
				}

				string[] texts;

				if (string.IsNullOrEmpty(state.Text))
					texts = Array.Empty<string>();
				else
					texts = state.Text.Split('\n');

				await JsModule.InvokeAsync<bool>(
					"drawState",
					state.Coordinate.X,
					state.Coordinate.Y,
					state.Radius,
					currentColour,
					texts,
					editable && _lineVisible
				);
			}
			return true;
		}
		return false;
	}

	private async Task MoveState(MouseEventArgs mouseEventArgs)
	{
		if (CheckJsModule(JsModule)
		&& _fSM.SelectedState != null
		&& mouseEventArgs.Buttons > 0
		&& mouseEventArgs.Buttons <= 3)
		{
			SetMouseCoords(mouseEventArgs.OffsetX, mouseEventArgs.OffsetY);
			var coords = new CanvasCoordinate(_mouseX, _mouseY);

			_fSM.SelectedState.Coordinate = coords;

			await DrawMachineAsync();

		}
	}

	private async Task DeselectState(FocusEventArgs focusEventArgs)
	{
		_fSM.SelectedState = null;
		_lineVisible = false;
		_stopTimer = false;

		if (_drawTimer != null)
			await _drawTimer.DisposeAsync();

		await DrawMachineAsync();
	}

	async ValueTask IAsyncDisposable.DisposeAsync()
	{
		GC.SuppressFinalize(this);
		if (JsModule != null)
			await JsModule.DisposeAsync();

		if (_drawTimer != null)
			await _drawTimer.DisposeAsync();
	}
}
