@using System.Text
@using System.Text.RegularExpressions
@using FSM
@inherits ModuleCheckBaseComponent
@rendermode InteractiveWebAssembly
@implements IAsyncDisposable
@inject IFSMDrawer _fsmDrawer
@inject ILogger<FSMCanvas> _logger

<div class="center canvas-top-buttons">
	Export as:
	<button class="canvas-button" @onclick="SaveAsPNG">PNG</button>
	<form class="svg-form">
		<input class="svg-scale-input" type="number" min="0" placeholder="SVG export Scale" step="0.01"
		@bind:event="oninput" @bind="_canvasExportScale" />
		<button class="canvas-button" @onclick="SaveAsSvg">SVG</button>
	</form>
	<button class="canvas-button" @onclick="SaveAsJson">JSON</button>
	<button class="canvas-button" @onclick="UploadJson">Upload JSON</button>
	<AuthorizeView>
		<button class="canvas-button">
			<a class="remove-link-style" href="MyFSMs?saveCurrent=true">
				Save
			</a>
		</button>
	</AuthorizeView>

	<button title="ctrl+." class="canvas-button"
			style="@(_superScriptMode ? "background-color:#a45cbd": null)"
			@onclick="ToggleSuperScriptHandler">
		aˣ
	</button>
	<button title="ctrl+," class="canvas-button"
			style="@(_subScriptMode ? "background-color:#a45cbd": null)"
			@onclick="ToggleSubScriptHandler">
		aₓ
	</button>
</div>
<details class="canvas-details">
	<summary class="canvas-details-button">Finite State Machine Name & Description</summary>
	<form class="center canvas-form">
		<div class="canvas-name-group">
			<label for="canvasName">Name:</label>
			<input id="canvasName" class="canvas-name" type="text" name="name" placeholder="Name"
				   @bind:event="oninput" @bind="_fsmDrawer.FSM.Name" />
		</div>
		<div class="canvas-desc-group">
			<label class="canvas-desc-label" for="canvasDesc">Description:</label>
			<textarea id="canvasDesc" name="Description" placeholder="Description" rows="10" cols="50"
				   @bind:event="oninput" @bind="_fsmDrawer.FSM.Description" />
		</div>
	</form>
</details>
<canvas
	id="FSMCanvas"
	@ref="_canvasElement"
	contenteditable="true"
	height="@Height"
	width="@Width"
	@onmousedown:preventDefault
	@onmousedown="MouseDownHandler"
	@onmouseup="MouseUpHandler"
	@onkeydown:preventDefault
	@onkeydown="KeyHandler"
	@onmousemove="MoveMouseHandler"
	@onblur="DeselectState"
>
	Your browser does not support the HTML5 &lt;canvas&gt;
	element.
</canvas>

<input @ref="_jsonUpload" id="json-upload" type="file" accept="application/json" @onchange="LoadUploadedJson" />

@code {
	[Parameter]
	public int Height { get; set; } = 150;

	[Parameter]
	public int Width { get; set; } = 300;

	[Parameter]
	public bool MustRetryContext { get; set; } = false;

	private ElementReference? _canvasElement;
	private ElementReference? _jsonUpload;
	private float _canvasExportScale { get; set; } = 1;
	private Timer? _drawTimer;
	private bool _canResizeState = false;
	private bool _subScriptMode = false;
	private bool _superScriptMode = false;
	private bool _pressedShift = false;
	private bool _pressedCtrl = false;
	private bool _caretVisible = true;
	private int _drawTimerInterval = 500;
	private DateTime _lastDrawTimerCall = DateTime.Now;

	/// <summary>
	/// The last co-ordinate of the pointer relative in the canvas space.
	/// </summary>
	private CanvasCoordinate _lastMousePos = new (0, 0);

	private float _defalutStateRadius = 30;
	private int _transitionSearchRadius = 10;
	private bool _canvasHasFocus = false;
	private const string _canvasBackgroundColour = "#313338";
	private const string _selectedColour = "#9999ff";
	private const string _colour = "#ffffff";

	#region Greek Alphabet
	/// <summary>
	/// <para>Lowercase greek symbols in unicode range: U+03b1 to U+03c9</para>
	/// <para>Uppercase greek symbols in unicode range: U+0391 to U+03a9</para>
	/// <para>Unicode for empty set (∅): U+2205</para>
	/// <para>Unicdoe for rightarrow (→): U+2192</para>
	/// <para>Unicode for leftarrow (←): U+2190</para>
	/// </summary>
	private readonly string[] _greekAlphabet =
	[
		"alpha",
	"beta",
	"gamma",
	"delta",
	"epsilon",
	"zeta",
	"eta",
	"theta",
	"iota",
	"kappa",
	"lambda",
	"mu",
	"nu",
	"xi",
	"omicron",
	"pi",
	"rho",
	"sigma",
	"tau",
	"upsilon",
	"phi",
	"chi",
	"psi",
	"omega"
	];
	#endregion

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{

			await SetJsModule("./Components/FSMCanvas.razor.js");

			if (CheckJsModule(JsModule))
			{
				IFiniteStateMachine? fsm = await JsModule.InvokeAsync<FiniteStateMachine>("fSMCanvasUtils.loadFSM");
				if (fsm is not null)
				{
					fsm.RemoveDuplicateStates();
					_fsmDrawer.FSM = fsm;
				}
				_fsmDrawer.FSM.Width = Width;
				_fsmDrawer.FSM.Height = Height;
				_fsmDrawer.SetColours(_colour, _selectedColour, _canvasBackgroundColour);
				_fsmDrawer.FSM.TransitionSearchRadius = _transitionSearchRadius;
				_fsmDrawer.SetJsModule(JsModule);
				await JsModule.InvokeAsync<bool>("fSMCanvasUtils.getCanvasContext", "FSMCanvas");
				StateHasChanged();
			}
			_drawTimer = _drawTimer = new Timer(DrawMachineTimer, null, 0, _drawTimerInterval);
		}
		if (CheckJsModule(JsModule) && MustRetryContext)
		{
			var isCreated = await JsModule.InvokeAsync<bool>("getCanvasContext", "FSMCanvas");

			if (isCreated)
				MustRetryContext = false;
			else
				_logger.LogError("Couldn't get 2d context");
		}

		if (_canvasElement is not null && _canvasHasFocus)
		{
			await _canvasElement.Value.FocusAsync(true);
			_canvasHasFocus = false;
		}

		if ((_fsmDrawer.SelectedState is not null || _fsmDrawer.SelectedTransition is not null)
			&& _drawTimer is not null
			&& (DateTime.Now - _lastDrawTimerCall) > TimeSpan.FromMilliseconds(_drawTimerInterval * 1.1)
		)
		{
			await _drawTimer.DisposeAsync();

			_drawTimer = new Timer(DrawMachineTimer, null, 0, _drawTimerInterval);
			_logger.LogDebug("Restarted the draw timer");
		}
	}

	private async void MouseDownHandler(MouseEventArgs mouseEventArgs)
	{
		_lastMousePos = new CanvasCoordinate(mouseEventArgs.OffsetX, mouseEventArgs.OffsetY);
		if (CheckJsModule(JsModule))
		{
			FiniteState? existingState = null;
			Transition? existingTransition = null;
			_pressedShift = mouseEventArgs.ShiftKey;
			_pressedCtrl = mouseEventArgs.CtrlKey;
			switch (_pressedShift)
			{
				case false:
					existingState = _fsmDrawer.FSM.FindState(_lastMousePos);

					if (mouseEventArgs.Detail == 2)
					{
						bool exist = await DrawStateOrFinal(existingState);
						return;
					}

					_fsmDrawer.SelectedState = existingState;

					ToggleResizeState(_fsmDrawer.SelectedState);

					if (_fsmDrawer.SelectedState is null)
						_fsmDrawer.SelectedTransition = _fsmDrawer.FSM.FindTransition(_lastMousePos);
					else
						_fsmDrawer.SelectedTransition = null;
					break;
				case true:
					FiniteState? fromState = _fsmDrawer.FSM.FindState(_lastMousePos);

					if (fromState is null)
						existingTransition = await _fsmDrawer.CreateTransitionAsync(
							_lastMousePos, _lastMousePos
						);
					else
						existingTransition = await _fsmDrawer.CreateTransitionAsync(
							_lastMousePos, _lastMousePos,
							fromState, fromState
						);

					_fsmDrawer.SelectedTransition = existingTransition;
					break;
			}
		}
		/// Implement self angles snapping at right angles (π/2 rads)
		/// And fix self angles not moving as previously.
		/// Snapping for finite states and incoming transitions works
		_fsmDrawer.LastMouseDownCoord = _lastMousePos;
		if (_canvasElement is not null)
			_canvasHasFocus = true;
		await _fsmDrawer.DrawMachineAsync(_caretVisible);
	}

	private async void MoveMouseHandler(MouseEventArgs mouseEventArgs)
	{
		if (CheckJsModule(JsModule))
		{
			if (mouseEventArgs.Buttons > 0)
			{
				// Equation of Circle -> (x-a)^2 + (y-b)^2 <= r^2
				// where (a,b) are x and y coordinates of the centre of the circle respectively
				// r is radius of circle
				if (_fsmDrawer.SelectedState is not null)
				{
					if (_pressedCtrl && _canResizeState)
					{
						CanvasCoordinate coords = _fsmDrawer.SelectedState.Coordinate;
						float newRadius = (float) Math.Sqrt(
							Math.Pow(mouseEventArgs.OffsetX - coords.X, 2)
							+ Math.Pow(mouseEventArgs.OffsetY - coords.Y, 2)
						);
						_fsmDrawer.SelectedState.Radius = newRadius;
						_fsmDrawer.UpdateCurvedTransitions(_fsmDrawer.SelectedState);
					}
					else if (mouseEventArgs.Buttons <= 3)
					{
						CanvasCoordinate newCoord = new(mouseEventArgs.OffsetX, mouseEventArgs.OffsetY);
						_fsmDrawer.MoveState(_fsmDrawer.SelectedState, newCoord, _lastMousePos, true);
						_fsmDrawer.UpdateCurvedTransitions(_fsmDrawer.SelectedState);
					}
				}
				else if (_fsmDrawer.SelectedTransition is not null)
				{
					CanvasCoordinate newCoord = new(mouseEventArgs.OffsetX, mouseEventArgs.OffsetY);
					FiniteState fromState = _fsmDrawer.SelectedTransition.FromState;
					FiniteState toState = _fsmDrawer.SelectedTransition.ToState;
					switch (_pressedShift)
					{
						case false:
							if (fromState.IsDrawable && toState.IsDrawable)
								if (fromState != toState)
								{
									_fsmDrawer.CurveTransition(_lastMousePos, _fsmDrawer.SelectedTransition);
								}
								else
								{
									_fsmDrawer.UpdateSelfTransition(_fsmDrawer.SelectedTransition, newCoord);
								}
							else if (!fromState.IsDrawable)
							{
								_fsmDrawer.SelectedTransition.FromState.Coordinate = newCoord;
								_fsmDrawer.SnapState(_fsmDrawer.SelectedTransition.FromState, _fsmDrawer.SelectedTransition.ToState);
							}
							break;
						case true:
							FiniteState? tempToState = _fsmDrawer.FSM.FindState(newCoord);
							if (tempToState is not null)
							{
								toState = tempToState;
								if (tempToState == fromState)
									_fsmDrawer.UpdateSelfTransition(_fsmDrawer.SelectedTransition, newCoord);
							}
							else
							{
								FiniteState emptyState = new(newCoord, 0) { IsDrawable = false };
								toState = emptyState;
							}
							break;
					}
					_fsmDrawer.SelectedTransition.FromState = fromState;
					_fsmDrawer.SelectedTransition.ToState = toState;
				}
				_lastMousePos = new CanvasCoordinate(mouseEventArgs.OffsetX, mouseEventArgs.OffsetY);
				await _fsmDrawer.DrawMachineAsync(_caretVisible);
			}
		}
	}

	private void MouseUpHandler(MouseEventArgs mouseEventArgs)
	{
		_pressedCtrl = false;
		_pressedShift = false;
		_lastMousePos = new CanvasCoordinate(mouseEventArgs.OffsetX, mouseEventArgs.OffsetY);
		FiniteState? existingState = _fsmDrawer.FSM.FindState(_lastMousePos);
		if (_fsmDrawer.SelectedTransition is not null)
		{
			Transition transition = _fsmDrawer.SelectedTransition;
			if (!transition.ToState.IsDrawable)
			{
				_fsmDrawer.FSM.Transitions.Remove(_fsmDrawer.SelectedTransition);
				_fsmDrawer.SelectedTransition = null;
			}
		}
	}

	private async void KeyHandler(KeyboardEventArgs keyboardEventArgs)
	{
		if (CheckJsModule(JsModule))
		{
			if (_fsmDrawer.SelectedState is not null)
				StateKeyHandler(keyboardEventArgs, _fsmDrawer.SelectedState);
			else if (_fsmDrawer.SelectedTransition is not null)
				TransitionKeyHandler(keyboardEventArgs, _fsmDrawer.SelectedTransition);
			await _fsmDrawer.DrawMachineAsync(_caretVisible);
		}
	}

	private void ToggleSuperScriptHandler(MouseEventArgs mouseEventArgs)
	{
		_subScriptMode = false;
		_superScriptMode = !_superScriptMode;
	}

	private void ToggleSubScriptHandler(MouseEventArgs mouseEventArgs)
	{
		_superScriptMode = false;
		_subScriptMode = !_subScriptMode;
	}

	private async void DeselectState(FocusEventArgs focusEventArgs)
	{
		_fsmDrawer.SelectedState = null;
		_caretVisible = false;

		if (_drawTimer is not null)
			await _drawTimer.DisposeAsync();

		await _fsmDrawer.DrawMachineAsync(_caretVisible);
		_logger.LogInformation("Canvas isn't the focused element in the page.");
	}

	private async void SaveAsPNG(MouseEventArgs mouseEventArgs)
	{
		if (CheckJsModule(JsModule))
			await JsModule.InvokeVoidAsync("saveAsPNG", _fsmDrawer.FSM, _colour);
	}

	private async void SaveAsSvg(MouseEventArgs mouseEventArgs)
	{
		if (CheckJsModule(JsModule))
			await JsModule.InvokeVoidAsync("saveAsSvg", _fsmDrawer.FSM, _colour, _canvasBackgroundColour, _canvasExportScale);
	}

	private async void SaveAsJson(MouseEventArgs mouseEventArgs)
	{
		if (CheckJsModule(JsModule))
			await JsModule.InvokeVoidAsync("saveAsJson", _fsmDrawer.FSM);
	}

	private async void UploadJson(MouseEventArgs mouseEventArgs)
	{
		if (CheckJsModule(JsModule) && _jsonUpload is not null)
			await JsModule.InvokeVoidAsync("uploadJson", _jsonUpload);
	}

	private async void LoadUploadedJson(ChangeEventArgs changeEventArgs)
	{
		if (CheckJsModule(JsModule) && _jsonUpload is not null)
		{
			try
			{
				IFiniteStateMachine? fsm = await JsModule.InvokeAsync<FiniteStateMachine>("loadJsonUpload", _jsonUpload);
				if (fsm is not null)
				{
					fsm.RemoveDuplicateStates();
					_fsmDrawer.FSM = fsm;
					await _fsmDrawer.DrawMachineAsync();
				}
			}
			catch (Exception)
			{
				await JS.InvokeVoidAsync("alert", "Json file uploaded is malformed");
			}
		}
	}

	async ValueTask IAsyncDisposable.DisposeAsync()
	{
		GC.SuppressFinalize(this);
		if (JsModule is not null)
			await JsModule.DisposeAsync();

		if (_drawTimer is not null)
			await _drawTimer.DisposeAsync();
	}
}
