@using FSM
@inherits ModuleCheckBaseComponent
@implements IAsyncDisposable
@inject IJSRuntime JS

<section class="center">
	Export as:
	<a href="javascript:saveAsPNG()"
	   download>PNG</a>
	   |
	<a href="javascript:saveAsSVG()"
	   download>SVG</a>
	|
	<a href="javascript:saveAsLaTeX()"
	   download>LaTeX</a>
</section>
<canvas
	id="FSMCanvas"
	tabindex="0"
	height="@Height"
	width="@Width"
	class="border border-dark"
	@ondblclick="ClicksStateHandler"
	@onclick="ClicksStateHandler"
	@onkeydown="DeleteState"
>
	Your browser does not support the HTML5 &lt;canvas&gt;
	element.
</canvas>

@code {
	[Parameter]
	public int Height { get; set; } = 150;

	[Parameter]
	public int Width { get; set; } = 300;

	private IJSObjectReference? module;

	private FiniteStateMachine _fSM = new FiniteStateMachine();

	/// <summary>
	/// X co-ordinate relative in the canvas space.
	/// </summary>
	private int _mouseX;
	/// <summary>
	/// Y co-ordinate relative in the canvas space.
	/// </summary>
	private int _mouseY;

	private float _defalutStateRadius = 30;

	private const string _selectedStateColour = "#0000ff";
	private const string _stateColour = "#000000";

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			module = await JS.InvokeAsync<IJSObjectReference?>("import", "./Components/FSMCanvas.razor.js");
		}
	}

	/*
	*
	*
	*
	*
	*
	*
	* @onmousedown="Some Method" Mouse down event works so I can move things !!!!!!!!!!!!!!!!!!!!!!!!
	*
	*
	*
	*
	*
	*/

	private async ValueTask<bool> CreateState(CanvasCoordinate coordinate)
	{
		if (CheckJsModule(module))
		{
			bool isCreated = await module.InvokeAsync<bool>(
						"DrawState",
						new object[]
						{
							_mouseX,
							_mouseY,
							_defalutStateRadius,
							_selectedStateColour
						}
					);

			if (!isCreated)
				return false;

			coordinate = new CanvasCoordinate(_mouseX, _mouseY);
			_fSM.AddState(coordinate, _defalutStateRadius);

			return true;
		}
		return false;
	}

	private async ValueTask<bool> DrawMachine(CanvasCoordinate? selectedCoords = null)
	{
		if (CheckJsModule(module)
		&& await module.InvokeAsync<bool>("clearCanvas"))
		{
			bool hasSelectedState = false;
			string currentColour = _stateColour;
			foreach (FiniteState state in _fSM.States)
			{
				currentColour = _stateColour;

				if (
					selectedCoords != null
					&& state.Coordinate.X == selectedCoords.X
					&& state.Coordinate.Y == selectedCoords.Y
				)
				{
					currentColour = _selectedStateColour;
					hasSelectedState = true;
				}

				await module.InvokeAsync<bool>(
					"DrawState",
					state.Coordinate.X,
					state.Coordinate.Y,
					state.Radius,
					currentColour
				);
			}
			return hasSelectedState;
		}
		return false;
	}

	private async Task DeleteState(KeyboardEventArgs keyboardEventArgs)
	{
		if (CheckJsModule(module))
		{
			if (_fSM.SelectedState != null
				&& keyboardEventArgs.Code.ToLower() == "delete"
				&& _fSM.RemoveState(_fSM.SelectedState.Coordinate)
			)
			{
				_ = await DrawMachine();
			}
		}
	}

	private async Task ClicksStateHandler(MouseEventArgs mouseEventArgs)
	{
		if (CheckJsModule(module))
		{
			_mouseX = (int)mouseEventArgs.OffsetX;
			_mouseY = (int)mouseEventArgs.OffsetY;

			var coordinate = new CanvasCoordinate(_mouseX, _mouseY);
			FiniteState? existingState = _fSM.FindState(coordinate);

			if (existingState == null && mouseEventArgs.Detail > 1)
			{
				bool isCreated = await CreateState(coordinate);

				if (!isCreated)
					throw new Exception($"State to be created at {(_mouseX, _mouseY)} failed to be created");

				return;
			}

			FiniteState? prevSelectedState = _fSM.SelectedState;

			_fSM.SelectedState = existingState;

			if (prevSelectedState != _fSM.SelectedState)
			{
				_ = await DrawMachine(_fSM.SelectedState?.Coordinate);
			}

		}
	}

	async ValueTask IAsyncDisposable.DisposeAsync()
	{
		if (module is not null)
		{
			await module.DisposeAsync();
		}
	}
}
