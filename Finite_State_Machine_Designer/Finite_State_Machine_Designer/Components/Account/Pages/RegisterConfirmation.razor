@page "/Account/RegisterConfirmation"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Finite_State_Machine_Designer.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject PersistentComponentState _persistState

<PageTitle>Register confirmation</PageTitle>

<h1>Register confirmation</h1>

<StatusMessage Message="@statusMessage" />

<p>Please check your email to confirm your account.</p>

@code {
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private bool _sentEmail = false;

    protected override async Task OnInitializedAsync()
    {
        _persistState.RegisterOnPersisting(
            () =>
            {
                _persistState.PersistAsJson(nameof(_sentEmail), _sentEmail);
                return Task.CompletedTask;
            }
        );

        _ = _persistState.TryTakeFromJson(nameof(_sentEmail), out _sentEmail);

        if (Email is null)
            RedirectManager.RedirectTo("");

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
        }
        else if (!_sentEmail && !string.IsNullOrWhiteSpace(user.Email))
        {
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            string confirmationLink = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId,
                ["code"] = code, ["returnUrl"] = ReturnUrl });
            _ = EmailSender.SendConfirmationLinkAsync(user, user.Email, confirmationLink);
            _sentEmail = true;
        }
    }
}
