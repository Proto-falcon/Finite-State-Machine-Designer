@page "/MyFSMs"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore.ChangeTracking
@using Finite_State_Machine_Designer.Data
@using Finite_State_Machine_Designer.Services
@using Finite_State_Machine_Designer.Client.FSM
@inherits ModuleCheckBaseComponent
@rendermode InteractiveServer
@implements IDisposable
@inject UserService userService
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Navigation
@inject ILogger<MyFSMs> _logger
@attribute [Authorize]

<PageTitle>My State Machines</PageTitle>
<SectionContent SectionId="MainLayout.TopBarSection">
    <h1>Finite State Machines</h1>
</SectionContent>

<div class="curent-fsm-section">
    @if (!_finishLoadingFSM)
    {
        <Loading Height="10em" Width="10em" Style="border-width: 1em; justify-self: center;" />
    }
    else if (_currentFSM is null)
    {
        <h2>No FSM currently in use</h2>
    }
    else
    {
        <div class="canvas-name-group canvas-info-group">
            <h2><label for="canvasName">Name: @_currentFSM.Name</label></h2>
            <input id="canvasName" class="canvas-name" type="text" name="name" placeholder="Name"
                   @bind:event="oninput" @bind="_currentFSM.Name" />
        </div>
        <div class="save-section">
            @if (_currentlySaving)
            {
                <Loading Height="1.5em" Width="1.5em" Style="border-width: 0.2em;" />
            }
            else
            {
                <button class="current-save-button" @onclick="SetSaveCurrent">Save</button>
            }
            @if (_currentSaved)
            {
                <p class="blink">Saved!!</p>
            }
            else if (_currentSavedFailed)
            {
                <p class="blink">Couldn't save!! Something went wrong.</p>
            }
        </div>
        <details>
            <summary class="canvas-desc-summary">Description</summary>
            <div class="canvas-desc-group canvas-info-group">
                <label class="canvas-desc-label" for="canvasDesc">Description:</label>
                <textarea id="canvasDesc" name="Description"
                    placeholder="Description" rows="10" cols="50"
                    @bind:event="oninput" @bind="_currentFSM.Description" />
            </div>
        </details>
        <div class="current-svg-container">
            <img @onload="e => RevokeUrl(_renderCurrentFSM)" src="@_renderCurrentFSM" />
        </div>
    }
</div>
<div style="flex-direction:row;flex-wrap:wrap;">

</div>
<canvas id="hiddenCanvas" style="display:none;"/>
<!-- Add a grid of FSMs that the logged in user has made
     The html and css is from the final year project in Uni
     when trying to display recipe results
     flex-grow is used to fill the remaining space in the container
-->
@code
{
    [SupplyParameterFromQuery]
    [Parameter]
    public bool SaveCurrent { get; set; }

    private ApplicationUser _user = new ApplicationUser();
    private FiniteStateMachine? _currentFSM = null;
    private int _availableFsmsLimit = 10;
    private int _fsmsPage = 1;
    private bool _currentlySaving = false;
    private bool _currentSaved = false;
    private bool _currentSavedFailed = false;
    private bool _finishLoadingFSM = false;
    private const string _canvasBackgroundColour = "#313338";
    private const string _colour = "#ffffff";
    private string _renderCurrentFSM = string.Empty;
    private List<MarkupString> _renderedFsms = [];

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += HandleLocationChanged;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetJsModule("./Components/Pages/MyFSMs.razor.js");
            await using ApplicationDbContext dbContext = await DbFactory.CreateDbContextAsync();
            string? userName = userService.GetUser().Identity?.Name;
            if (userName is null)
            {
                Navigation.NavigateTo("Account/Login");
                return;
            }
            ApplicationUser? fetchedUser = dbContext.Users
                .Where(user => user.NormalizedUserName == userName.ToUpper())
                .Include(user => user.StateMachines
                    .OrderByDescending(fsm => fsm.TimeUpdated)
                    .Take(_availableFsmsLimit))
                .AsNoTrackingWithIdentityResolution()
                .FirstOrDefault();
            if (fetchedUser is ApplicationUser)
            {
                _user = fetchedUser;
                Parallel.ForEach(_user.StateMachines, GetFullFsm);
            }
            else
                Navigation.NavigateTo("Account/Login");
        }
        if (CheckJsModule(JsModule) && !_finishLoadingFSM)
        {
            await JsModule.InvokeAsync<bool>("fSMCanvasUtils.getCanvasContext", "hiddenCanvas");
            _currentFSM = await JsModule.InvokeAsync<FiniteStateMachine>("fSMCanvasUtils.loadFSM");
            if (_currentFSM is not null)
            {
                _currentFSM.SanitiseFsm();
                _renderCurrentFSM = await GenerateFsmSvg(_currentFSM, 0.5);
            }
            _finishLoadingFSM = !string.IsNullOrWhiteSpace(_renderCurrentFSM);
            StateHasChanged();
        }
        if (SaveCurrent)
            await SaveCurrentFSM();
    }

    private async void GetFullFsm(FiniteStateMachine fsm)
    {
        await using DbContext dbContext = await DbFactory.CreateDbContextAsync();
        EntityEntry<FiniteStateMachine> fsmEntry = dbContext.Attach(fsm);
        await fsmEntry.Collection(stateMachine => stateMachine.States).LoadAsync();
        await fsmEntry.Collection(stateMachine => stateMachine.Transitions).LoadAsync();

        List<Transition> validTransitions = [];

        foreach (Transition transition in fsm.Transitions)
        {
            if (fsm.States.Find(state => state.Id == transition.FromStateId) is FiniteState fromState)
                transition.FromState = fromState;
            if (fsm.States.Find(state => state.Id == transition.ToStateId) is FiniteState toState)
                transition.ToState = toState;

            if (transition.FromState is not null && transition.ToState is not null)
                validTransitions.Add(transition);
        }

        fsm.Transitions = validTransitions;
    }

    /// <summary>
    /// Generates an SVG of the Finite State Machine
    /// </summary>
    /// <param name="fsm">Finite State Machine</para>
    /// <param name="scale">Scale the FSM from original canvas dimensions</para>
    /// <returns><see cref="MarkupString"/> that contains the SVG of Finite State Machine</returns>
    private async Task<string> GenerateFsmSvg(FiniteStateMachine fsm, double scale = 1)
    {
        string fsmSvg = string.Empty;
        if (CheckJsModule(JsModule))
        {
            fsmSvg = await JsModule.InvokeAsync<string>("fSMExport.fsmToSVG",
                fsm, fsm.Width, fsm.Height, _colour,
                _canvasBackgroundColour, 2, scale, true);
        }
        return fsmSvg;
    }

    private async void RevokeUrl(string url)
        => await JS.InvokeVoidAsync("URL.revokeObjectURL", url);

    private void SetSaveCurrent(MouseEventArgs mouseEventArgs) => SaveCurrent = true;

    private async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _finishLoadingFSM = false;
        await SetJsModule("./Components/Pages/MyFSMs.razor.js");
        if (CheckJsModule(JsModule))
            await JsModule.InvokeVoidAsync("fSMCanvasUtils.saveFSM", _currentFSM);
    }

    /// <summary>
    /// Saves the current FSM in use to database.
    /// </summary>
    private async Task SaveCurrentFSM()
    {
        if (CheckJsModule(JsModule))
        {
            SaveCurrent = false;
            _currentlySaving = true;
            _currentSaved = false;
            _currentSavedFailed = false;
            StateHasChanged();
            if (_currentFSM is not null)
            {
                try
                {
                    await using (ApplicationDbContext dbContext = await DbFactory.CreateDbContextAsync())
                    {
                        FiniteStateMachine? existingFSM = await dbContext.Entry(_user)
                            .Collection(user => user.StateMachines)
                            .Query()
                            .Where(fsm => fsm.Name == _currentFSM.Name)
                            .FirstOrDefaultAsync();
                        if (existingFSM is not null)
                        {
                            await using var transact = await dbContext.Database.BeginTransactionAsync();
                            try
                            {
                                _currentFSM.Id = existingFSM.Id;
                                await DBCommnds.UpdateFsm(dbContext, _currentFSM, _user.Id);
                                await transact.CommitAsync();
                            }
                            catch (OperationCanceledException)
                            {
                                await transact.RollbackAsync();
                                throw;
                            }
                        }
                        else
                        {
                            await using var transact = await dbContext.Database.BeginTransactionAsync();
                            try
                            {
                                await DBCommnds.AddFSM(dbContext, _currentFSM, _user.Id);
                                await transact.CommitAsync();
                            }
                            catch (OperationCanceledException)
                            {
                                await transact.RollbackAsync();
                                throw;
                            }
                        }
                    }
                    _currentSaved = true;
                    await JsModule.InvokeVoidAsync("fSMCanvasUtils.saveFSM", _currentFSM);
                    _logger.LogInformation("Successfully saved the current FSM '{FSM}' from user '{user}'",
                        _currentFSM.Name, _user.Id);
                }
                catch (Exception ex)
                {
                    _currentSavedFailed = true;
                    _logger.LogError("Couldn't save the current FSM '{FsmName}' from user '{user}'",
                    _currentFSM.Name, _user.Id);
                    _logger.LogError(ex.ToString());
                }
            }
            _currentlySaving = false;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= HandleLocationChanged;
    }
}