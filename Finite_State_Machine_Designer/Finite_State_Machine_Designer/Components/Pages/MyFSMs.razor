@page "/MyFSMs"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore.ChangeTracking
@using Finite_State_Machine_Designer.Data
@using Finite_State_Machine_Designer.Services
@using Finite_State_Machine_Designer.Client.FSM
@inherits ModuleCheckBaseComponent
@rendermode InteractiveServer
@implements IDisposable
@inject UserService userService
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Navigation
@inject ILogger<MyFSMs> _logger
@attribute [Authorize]

<PageTitle>My State Machines</PageTitle>
<SectionContent SectionId="MainLayout.TopBarSection">
    <h1>Finite State Machines</h1>
</SectionContent>

<div class="current-fsm-section"
    style="@(!_displayCurrentFsm ? "display:none;" : "")
    @(_loadingFsmView ? "grid-template-columns: 1fr;" : "")">
    @if (_loadingFsmView)
    {
        <Loading Height="10em" Width="10em"
            Style="border-width: 1em; justify-self: center;" />
    }
    else if (_currentFsm is null)
    {
        <h2>No FSM currently in use</h2>
    }
    else
    {
        <div>
            <div class="canvas-name-group canvas-info-group">
                <h2><label for="canvasName">Name: @_currentFsm.Name</label></h2>
                <input id="canvasName" class="canvas-name" type="text"
                    name="name" placeholder="Name"
                    @bind:event="oninput" @bind="_currentFsm.Name" />
            </div>
            <div class="save-section">
                @if (_currentlySaving)
                {
                    <Loading Height="1.5em" Width="1.5em"
                        Style="border-width: 0.2em;" />
                }
                else
                {
                    <button class="current-save-button"
                    @onclick="SetSaveCurrent">
                        Save
                    </button>
                }
                @if (_currentSaved)
                {
                    <p class="blink">Saved!!</p>
                }
                else if (_currentSavedFailed)
                {
                    <p class="blink">@_errorSaveMsg</p>
                }
            </div>
            <p class="canvas-desc-summary">Description</p>
            <div class="canvas-desc-group canvas-info-group">
                <label class="canvas-desc-label" for="canvasDesc">Description:</label>
                <textarea id="canvasDesc" name="Description"
            placeholder="Description" rows="10" cols="69"
                    @bind:event="oninput" @bind="_currentFsm.Description" />
            </div>
        </div>
        <div class="fsm-svg-section">
        <button 
            @onclick="e => _displayCurrentFsm = false">✖️</button>
        <img class="fsm-svg" @onload="e => RevokeUrl(_fsmSvgUrl)"
            src="@_fsmSvgUrl" />
        </div>
    }
</div>
@if (_currentDrawnFsm is not null)
{
    <button @onclick="async (e) => await DisplayFsm(_currentDrawnFsm)">
        Currently drawn FSM: @_currentDrawnFsm.Name
    </button>
}
@if (_finishLoading)
{
    <ol class="fsm-list-container">
        @foreach (FiniteStateMachine fsm in _user.StateMachines)
        {
            <li class="fsm-list-item" @onclick="async (e) => await DisplayFsm(fsm, true)">
                <div><b>@fsm.Name</b></div>
                <div><b>@fsm.Description</b></div>
                <div><b>Last Updated: @fsm.TimeUpdated</b></div>
                <div><b>Creation Time: @fsm.TimeCreated</b></div>
            </li>
        }
    </ol>
}
else
{
    <div style="display:grid;">
        <Loading Height="10em" Width="10em"
                Style="border-width: 1em; justify-self: center;" />
    </div>
}

<canvas id="hiddenCanvas" style="display:none;"/>
@code
{
    [SupplyParameterFromQuery]
    [Parameter]
    public bool SaveCurrent { get; set; }

    private ApplicationUser _user = new ApplicationUser();
    private FiniteStateMachine? _currentFsm = null;
    private FiniteStateMachine? _currentDrawnFsm = null;
    private int _availableFsmsLimit = 20;
    private double _mainFsmSvgScale = 0.5;
    private bool _displayCurrentFsm = false;
    private bool _currentlySaving = false;
    private bool _currentSaved = false;
    private bool _currentSavedFailed = false;
    private bool _finishLoading = false;
    private bool _loadingFsmView = false;
    private const string _canvasBackgroundColour = "#313338";
    private const string _colour = "#ffffff";
    private string _fsmSvgUrl = string.Empty;
    private string _errorSaveMsg = "Couldn't save!! Something went wrong.";

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += HandleLocationChanged;
    }

    private async Task DisplayFsm(FiniteStateMachine fsm, bool reload = false)
    {
        _currentFsm = fsm;
        _loadingFsmView = true;
        _displayCurrentFsm = true;
        if (reload)
        {
            await using ApplicationDbContext dbContext = await DbFactory.CreateDbContextAsync();
            await DBCommnds.GetFullFsmAsync(dbContext, fsm, CancellationToken.None);
        }

        _fsmSvgUrl = await GenerateFsmSvgAsync(fsm, _mainFsmSvgScale);
        _loadingFsmView = false;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetJsModule("./Components/Pages/MyFSMs.razor.js");
            await using ApplicationDbContext dbContext =
            await DbFactory.CreateDbContextAsync();
            string? userName = userService.GetUser().Identity?.Name;
            if (userName is null)
            {
                Navigation.NavigateTo("Account/Login");
                return;
            }
            ApplicationUser? fetchedUser = dbContext.Users
                .Where(user => user.NormalizedUserName == userName.ToUpper())
                .AsNoTrackingWithIdentityResolution()
                .FirstOrDefault();
            if (fetchedUser is ApplicationUser)
            {
                _user = fetchedUser;
                _user.StateMachines = await dbContext.Entry(_user)
                    .Collection(user => user.StateMachines)
                    .Query()
                    .OrderByDescending(fsm => fsm.TimeUpdated)
                    .Take(_availableFsmsLimit)
                    .AsNoTrackingWithIdentityResolution()
                    .ToListAsync();
            }
            else
                Navigation.NavigateTo("Account/Login");
            _finishLoading = true;
        }
        if (CheckJsModule(JsModule) && _currentDrawnFsm is null)
        {
            await JsModule.InvokeAsync<bool>("fSMCanvasUtils.getCanvasContext",
                "hiddenCanvas");
            FiniteStateMachine? fsm =
            await JsModule.InvokeAsync<FiniteStateMachine>("fSMCanvasUtils.loadFSM");
            if (fsm is not null
                && fsm.States is not null && fsm.States.Count > 0)
            {
                fsm.SanitiseFsm();
                _currentDrawnFsm = fsm;
                _fsmSvgUrl = await GenerateFsmSvgAsync(_currentDrawnFsm, _mainFsmSvgScale);
            }
            else
                _currentDrawnFsm = new FiniteStateMachine();
            StateHasChanged();
        }
        if (SaveCurrent)
            await SaveCurrentFSMAsync();
    }

    private async void RevokeUrl(string url)
        => await JS.InvokeVoidAsync("URL.revokeObjectURL", url);

    private void SetSaveCurrent(MouseEventArgs mouseEventArgs) => SaveCurrent = true;

    private async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // _finishLoading = false;
        await SetJsModule("./Components/Pages/MyFSMs.razor.js");
        if (CheckJsModule(JsModule))
            await JsModule.InvokeVoidAsync("fSMCanvasUtils.saveFSM", _currentDrawnFsm);
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= HandleLocationChanged;
    }
}