@page "/MyFSMs"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore.ChangeTracking
@using Finite_State_Machine_Designer.Data
@using Finite_State_Machine_Designer.Services
@using Finite_State_Machine_Designer.Client.FSM
@inherits ModuleCheckBaseComponent
@rendermode InteractiveServer
@implements IDisposable
@inject UserService userService
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Navigation
@inject ILogger<MyFSMs> _logger
@attribute [Authorize]

<PageTitle>My State Machines</PageTitle>
<SectionContent SectionId="MainLayout.TopBarSection">
    <h1>Finite State Machines</h1>
</SectionContent>

<div class="curent-fsm-section">
    @if (!_finishLoadingFSM)
    {
        <Loading Height="10em" Width="10em" Style="border-width: 1em; justify-self: center;" />
    }
    else if (_currentFSM is null)
    {
        <h2>No FSM currently in use</h2>
    }
    else
    {
        <div class="canvas-name-group canvas-info-group">
            <h2><label for="canvasName">Name: @_currentFSM.Name</label></h2>
            <input id="canvasName" class="canvas-name" type="text" name="name" placeholder="Name"
                   @bind:event="oninput" @bind="_currentFSM.Name" />
        </div>
        <div class="save-section">
            @if (_currentlySaving)
            {
                <Loading Height="1.5em" Width="1.5em" Style="border-width: 0.2em;" />
            }
            else
            {
                <button class="current-save-button" @onclick="SetSaveCurrent">Save</button>
            }
            @if (_currentSaved)
            {
                <p class="blink">Saved!!</p>
            }
            else if (_currentSavedFailed)
            {
                <p class="blink">Couldn't save!! Something went wrong.</p>
            }
        </div>
        <details>
            <summary class="canvas-desc-summary">Description</summary>
            <div class="canvas-desc-group canvas-info-group">
                <label class="canvas-desc-label" for="canvasDesc">Description:</label>
                <textarea id="canvasDesc" name="Description"
                    placeholder="Description" rows="10" cols="50"
                    @bind:event="oninput" @bind="_currentFSM.Description" />
            </div>
        </details>
        <img class="fsm-svg" @onload="e => RevokeUrl(_renderCurrentFSM)" src="@_renderCurrentFSM" />
    }
</div>
<div style="flex-direction:row;flex-wrap:wrap;">

</div>
<canvas id="hiddenCanvas" style="display:none;"/>
<!-- Add a grid of FSMs that the logged in user has made
     The html and css is from the final year project in Uni
     when trying to display recipe results
     flex-grow is used to fill the remaining space in the container
-->
@code
{
    [SupplyParameterFromQuery]
    [Parameter]
    public bool SaveCurrent { get; set; }

    private ApplicationUser _user = new ApplicationUser();
    private FiniteStateMachine? _currentFSM = null;
    private int _availableFsmsLimit = 10;
    private double _mainFsmSvgScale = 0.5;
    private double _listFsmSvgScale = 0.3;
    private int _fsmsPage = 1;
    private bool _currentlySaving = false;
    private bool _currentSaved = false;
    private bool _currentSavedFailed = false;
    private bool _finishLoadingFSM = false;
    private const string _canvasBackgroundColour = "#313338";
    private const string _colour = "#ffffff";
    private string _renderCurrentFSM = string.Empty;
    /// <summary>
    /// Key is Id of FSM and value is URL to SVG
    /// </summary>
    private Dictionary<string, string> _fsmSvgUrls = [];

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += HandleLocationChanged;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetJsModule("./Components/Pages/MyFSMs.razor.js");
            await using ApplicationDbContext dbContext = await DbFactory.CreateDbContextAsync();
            string? userName = userService.GetUser().Identity?.Name;
            if (userName is null)
            {
                Navigation.NavigateTo("Account/Login");
                return;
            }
            ApplicationUser? fetchedUser = dbContext.Users
                .Where(user => user.NormalizedUserName == userName.ToUpper())
                .AsNoTrackingWithIdentityResolution()
                .FirstOrDefault();
            if (fetchedUser is ApplicationUser)
            {
                _user = fetchedUser;
                await dbContext.Entry(_user).Collection(user => user.StateMachines)
                    .Query()
                    .OrderByDescending(fsm => fsm.TimeUpdated)
                    .Take(_availableFsmsLimit)
                    .AsNoTrackingWithIdentityResolution()
                    .LoadAsync();
                await Parallel.ForEachAsync(_user.StateMachines, GetFullFsm);
            }
            else
                Navigation.NavigateTo("Account/Login");
        }
        if (CheckJsModule(JsModule) && !_finishLoadingFSM)
        {
            await JsModule.InvokeAsync<bool>("fSMCanvasUtils.getCanvasContext", "hiddenCanvas");
            _currentFSM = await JsModule.InvokeAsync<FiniteStateMachine>("fSMCanvasUtils.loadFSM");
            if (_currentFSM is not null)
            {
                _currentFSM.SanitiseFsm();
                _renderCurrentFSM = await GenerateFsmSvg(_currentFSM, _mainFsmSvgScale);
            }
            _finishLoadingFSM = true;
            StateHasChanged();
        }
        if (SaveCurrent)
            await SaveCurrentFSM();
    }

    private async void RevokeUrl(string url)
        => await JS.InvokeVoidAsync("URL.revokeObjectURL", url);

    private void SetSaveCurrent(MouseEventArgs mouseEventArgs) => SaveCurrent = true;

    private async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _finishLoadingFSM = false;
        await SetJsModule("./Components/Pages/MyFSMs.razor.js");
        if (CheckJsModule(JsModule))
            await JsModule.InvokeVoidAsync("fSMCanvasUtils.saveFSM", _currentFSM);
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= HandleLocationChanged;
    }
}