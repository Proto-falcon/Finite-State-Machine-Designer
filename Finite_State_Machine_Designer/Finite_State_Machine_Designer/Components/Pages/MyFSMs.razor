@page "/MyFSMs"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore.ChangeTracking
@using Finite_State_Machine_Designer.Data
@using Finite_State_Machine_Designer.Services
@using Finite_State_Machine_Designer.Client.FSM
@inherits ModuleCheckBaseComponent
@rendermode InteractiveServer
@implements IDisposable
@inject UserService userService
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Navigation
@inject ILogger<MyFSMs> _logger
@attribute [Authorize]

<PageTitle>My State Machines</PageTitle>
<SectionContent SectionId="MainLayout.TopBarSection">
    <h1>Finite State Machines</h1>
</SectionContent>

<div style="display:grid; justify-content:center;">
    @if (!_finishLoadingFSM)
    {
        <Loading Height="10em" Width="10em" Style="border-width: 1em; justify-self: center;" />
    }
    else if (_currentFSM is null)
    {
        <h2>No FSM currently in use</h2>
    }
    else
    {
        <div class="canvas-name-group canvas-info-group">
            <h2><label for="canvasName">Name: @_currentFSM.Name</label></h2>
            <input id="canvasName" class="canvas-name" type="text" name="name" placeholder="Name"
                   @bind:event="oninput" @bind="_currentFSM.Name" />
        </div>
        <div>
            @if (_currentlySaving)
            {
                <Loading Height="1.5em" Width="1.5em" Style="border-width: 0.2em;" />
            }
            else
            {
                <button class="current-save-button" @onclick="SetSaveCurrent">Save</button>
            }
            @if (_currentSaved)
            {
                <p class="blink">Saved!!</p>
            }
            else if (_currentSavedFailed)
            {
                <p class="blink">Couldn't save!! Something went wrong.</p>
            }
        </div>
        <details>
            <summary style="font-size: 1.5em; user-select: none;">Description</summary>
            <div class="canvas-desc-group canvas-info-group">
                <label class="canvas-desc-label" for="canvasDesc">Description:</label>
                <textarea id="canvasDesc" name="Description" placeholder="Description" rows="10" cols="50"
                          @bind:event="oninput" @bind="_currentFSM.Description" />
            </div>
        </details>
        <div class="current-svg-container">@_renderCurrentFSM</div>
    }
</div>
<canvas id="hiddenCanvas" style="display:none;"/>
@code
{
    [SupplyParameterFromQuery]
    [Parameter]
    public bool SaveCurrent { get; set; }

    private ApplicationUser _user = new ApplicationUser();
    private FiniteStateMachine? _currentFSM = null;
    private bool _currentlySaving = false;
    private bool _currentSaved = false;
    private bool _currentSavedFailed = false;
    private bool _finishLoadingFSM = false;
    private const string _canvasBackgroundColour = "#313338";
    private const string _colour = "#ffffff";
    private MarkupString _renderCurrentFSM = new();
    private List<MarkupString> _fsmSvgs = [];

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += HandleLocationChanged;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetJsModule("./Components/Pages/MyFSMs.razor.js");
            await using ApplicationDbContext dbContext = await DbFactory.CreateDbContextAsync();
            string? userName = userService.GetUser().Identity?.Name;
            if (userName is not null)
            {
                ApplicationUser? fetchedUser = dbContext.Users
                .Where(user => user.NormalizedUserName == userName.ToUpper())
                .Include(user => user.StateMachines)
                .AsNoTrackingWithIdentityResolution()
                .FirstOrDefault();
                if (fetchedUser is ApplicationUser)
                    _user = fetchedUser;
                else
                    Navigation.NavigateTo("Account/Login");
        }
            else
                Navigation.NavigateTo("Account/Login");
        }
        if (CheckJsModule(JsModule) && !_finishLoadingFSM)
        {
            await JsModule.InvokeAsync<bool>("fSMCanvasUtils.getCanvasContext", "hiddenCanvas");
            _currentFSM = await JsModule.InvokeAsync<FiniteStateMachine>("fSMCanvasUtils.loadFSM");
            if (_currentFSM is not null)
            {
                _currentFSM.RemoveDuplicateStates();
                _renderCurrentFSM = await GenerateFsmSvg(_currentFSM);
            }
            _finishLoadingFSM = !string.IsNullOrWhiteSpace(_renderCurrentFSM.Value);
            StateHasChanged();
        }
        if (SaveCurrent)
            await SaveCurrentFSM();
    }

    /// <summary>
    /// Generates an SVG of the Finite State Machine
    /// </summary>
    /// <returns><see cref="MarkupString"/> that contains the SVG of Finite State Machine</returns>
    private async Task<MarkupString> GenerateFsmSvg(FiniteStateMachine fsm)
    {
        MarkupString fsmSvg = new();
        if (CheckJsModule(JsModule))
        {
            fsmSvg = new( await JsModule.InvokeAsync<string>("fSMExport.fsmToSVG",
                fsm, fsm.Width, fsm.Height, _colour,
                _canvasBackgroundColour, 2, 0.5, true));
        }
        return fsmSvg;
    }

    private void SetSaveCurrent(MouseEventArgs mouseEventArgs) => SaveCurrent = true;

    private async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _finishLoadingFSM = false;
        if (CheckJsModule(JsModule))
            await JsModule.InvokeVoidAsync("fSMCanvasUtils.saveFSM", _currentFSM);
    }

    /// <summary>
    /// Saves the current FSM in use to database.
    /// </summary>
    private async Task SaveCurrentFSM()
    {
        if (CheckJsModule(JsModule))
        {
            SaveCurrent = false;
            _currentlySaving = true;
            _currentSaved = false;
            _currentSavedFailed = false;
            StateHasChanged();
            if (_currentFSM is not null)
            {
                try
                {
                    _user.StateMachines.Clear();
                    await using (ApplicationDbContext dbContext = await DbFactory.CreateDbContextAsync())
                    {
                    dbContext.Attach(_user);
                        await dbContext.Entry(_user)
                            .Collection(user => user.StateMachines).LoadAsync();
                        FiniteStateMachine? existingFSM = null;
                    existingFSM = _user.StateMachines
                            .Find(fsmOther => fsmOther.Name == _currentFSM.Name);
                        if (existingFSM is not null)
                        {
                            await using var transact = await dbContext.Database.BeginTransactionAsync();
                            try
                            {
                        _user.StateMachines.Remove(existingFSM);
                                dbContext.Remove(existingFSM);
                                await dbContext.SaveChangesAsync();

                    foreach (FiniteState state in _currentFSM.States)
                                    if (string.IsNullOrWhiteSpace(state.Id))
                            state.Id = Guid.NewGuid().ToString();

                    foreach (Transition transition in _currentFSM.Transitions)
                                    if (string.IsNullOrWhiteSpace(transition.Id))
                            transition.Id = Guid.NewGuid().ToString();

                                if (string.IsNullOrWhiteSpace(existingFSM.Id)
                                    || string.IsNullOrWhiteSpace(_currentFSM.Id))
                                    _currentFSM.Id = Guid.NewGuid().ToString();

                    _user.StateMachines.Add(_currentFSM);
                    await dbContext.SaveChangesAsync();
                            }
                            catch (Exception ex)
                        {
                                await transact.RollbackAsync();
                                throw ex;
                            }
                            await transact.CommitAsync();
                        }
                        else
                        {
                            _currentFSM.Id = Guid.NewGuid().ToString();
                            _currentFSM.UserId = _user.Id;
                            foreach (FiniteState state in _currentFSM.States)
                                state.Id = Guid.NewGuid().ToString();
                            foreach (Transition transition in _currentFSM.Transitions)
                            {
                                transition.Id = Guid.NewGuid().ToString();
                                transition.FromId = transition.FromState.Id;
                                transition.ToId = transition.ToState.Id;
                            }
                            _user.StateMachines.Add(_currentFSM);
                            await dbContext.SaveChangesAsync();
                        }
                    }
                    _currentSaved = true;
                    await JsModule.InvokeVoidAsync("fSMCanvasUtils.saveFSM", _currentFSM);
                    _logger.LogInformation("Successfully saved the current FSM '{FSM}' from user '{user}'",
                        _currentFSM.Name, _user.Id);
                }
                catch (Exception ex)
                {
                    _currentSavedFailed = true;
                    _logger.LogError("Couldn't save the current FSM '{FsmName}' from user '{user}'", _currentFSM.Name, _user.Id);
                    _logger.LogError(ex.ToString());
                }
            }
            _currentlySaving = false;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= HandleLocationChanged;
    }
}